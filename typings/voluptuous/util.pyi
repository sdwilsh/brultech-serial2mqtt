"""
This type stub file was generated by pyright.
"""

__author__ = ...

def Lower(v):  # -> str:
    """Transform a string to lower case.

    >>> s = Schema(Lower)
    >>> s('HI')
    'hi'
    """
    ...

def Upper(v):  # -> str:
    """Transform a string to upper case.

    >>> s = Schema(Upper)
    >>> s('hi')
    'HI'
    """
    ...

def Capitalize(v):  # -> str:
    """Capitalise a string.

    >>> s = Schema(Capitalize)
    >>> s('hello world')
    'Hello world'
    """
    ...

def Title(v):  # -> str:
    """Title case a string.

    >>> s = Schema(Title)
    >>> s('hello world')
    'Hello World'
    """
    ...

def Strip(v):  # -> str:
    """Strip whitespace from a string.

    >>> s = Schema(Strip)
    >>> s('  hello world  ')
    'hello world'
    """
    ...

class DefaultTo:
    """Sets a value to default_value if none provided.

    >>> s = Schema(DefaultTo(42))
    >>> s(None)
    42
    >>> s = Schema(DefaultTo(list))
    >>> s(None)
    []
    """

    def __init__(self, default_value, msg=...) -> None: ...
    def __call__(self, v): ...
    def __repr__(self): ...

class SetTo:
    """Set a value, ignoring any previous value.

    >>> s = Schema(validators.Any(int, SetTo(42)))
    >>> s(2)
    2
    >>> s("foo")
    42
    """

    def __init__(self, value) -> None: ...
    def __call__(self, v): ...
    def __repr__(self): ...

class Set:
    """Convert a list into a set.

    >>> s = Schema(Set())
    >>> s([]) == set([])
    True
    >>> s([1, 2]) == set([1, 2])
    True
    >>> with raises(Invalid, regex="^cannot be presented as set: "):
    ...   s([set([1, 2]), set([3, 4])])
    """

    def __init__(self, msg=...) -> None: ...
    def __call__(self, v): ...
    def __repr__(self): ...

class Literal:
    def __init__(self, lit) -> None: ...
    def __call__(self, value, msg=...): ...
    def __str__(self) -> str: ...
    def __repr__(self): ...

def u(x): ...
