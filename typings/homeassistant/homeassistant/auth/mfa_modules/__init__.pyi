"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import importlib
import logging
import types
from typing import Any

import voluptuous as vol
from homeassistant import data_entry_flow, requirements
from homeassistant.const import CONF_ID, CONF_NAME, CONF_TYPE
from homeassistant.core import HomeAssistant
from homeassistant.data_entry_flow import FlowResult
from homeassistant.exceptions import HomeAssistantError
from homeassistant.util.decorator import Registry
from voluptuous.humanize import humanize_error

"""
This type stub file was generated by pyright.
"""
MULTI_FACTOR_AUTH_MODULES = ...
MULTI_FACTOR_AUTH_MODULE_SCHEMA = ...
DATA_REQS = ...
_LOGGER = ...

class MultiFactorAuthModule:
    """Multi-factor Auth Module of validation function."""

    DEFAULT_TITLE = ...
    MAX_RETRY_TIME = ...
    def __init__(self, hass: HomeAssistant, config: dict[str, Any]) -> None:
        """Initialize an auth module."""
        ...
    @property
    def id(self) -> str:
        """Return id of the auth module.

        Default is same as type
        """
        ...
    @property
    def type(self) -> str:
        """Return type of the module."""
        ...
    @property
    def name(self) -> str:
        """Return the name of the auth module."""
        ...
    @property
    def input_schema(self) -> vol.Schema:
        """Return a voluptuous schema to define mfa auth module's input."""
        ...
    async def async_setup_flow(self, user_id: str) -> SetupFlow:
        """Return a data entry flow handler for setup module.

        Mfa module should extend SetupFlow
        """
        ...
    async def async_setup_user(self, user_id: str, setup_data: Any) -> Any:
        """Set up user for mfa auth module."""
        ...
    async def async_depose_user(self, user_id: str) -> None:
        """Remove user from mfa module."""
        ...
    async def async_is_user_setup(self, user_id: str) -> bool:
        """Return whether user is setup."""
        ...
    async def async_validate(self, user_id: str, user_input: dict[str, Any]) -> bool:
        """Return True if validation passed."""
        ...

class SetupFlow(data_entry_flow.FlowHandler):
    """Handler for the setup flow."""

    def __init__(
        self, auth_module: MultiFactorAuthModule, setup_schema: vol.Schema, user_id: str
    ) -> None:
        """Initialize the setup flow."""
        ...
    async def async_step_init(
        self, user_input: dict[str, str] | None = ...
    ) -> FlowResult:
        """Handle the first step of setup flow.

        Return self.async_show_form(step_id='init') if user_input is None.
        Return self.async_create_entry(data={'result': result}) if finish.
        """
        ...

async def auth_mfa_module_from_config(
    hass: HomeAssistant, config: dict[str, Any]
) -> MultiFactorAuthModule:
    """Initialize an auth module from a config."""
    ...
