"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import importlib
import logging
import types
from collections.abc import Mapping
from typing import Any

import voluptuous as vol
from homeassistant import data_entry_flow, requirements
from homeassistant.const import CONF_ID, CONF_NAME, CONF_TYPE
from homeassistant.core import HomeAssistant, callback
from homeassistant.data_entry_flow import FlowResult
from homeassistant.exceptions import HomeAssistantError
from homeassistant.util import dt as dt_util
from homeassistant.util.decorator import Registry
from voluptuous.humanize import humanize_error

from ..auth_store import AuthStore
from ..const import MFA_SESSION_EXPIRATION
from ..models import Credentials, RefreshToken, User, UserMeta

"""
This type stub file was generated by pyright.
"""
_LOGGER = ...
DATA_REQS = ...
AUTH_PROVIDERS = ...
AUTH_PROVIDER_SCHEMA = ...

class AuthProvider:
    """Provider of user authentication."""

    DEFAULT_TITLE = ...
    def __init__(
        self, hass: HomeAssistant, store: AuthStore, config: dict[str, Any]
    ) -> None:
        """Initialize an auth provider."""
        ...
    @property
    def id(self) -> str | None:
        """Return id of the auth provider.

        Optional, can be None.
        """
        ...
    @property
    def type(self) -> str:
        """Return type of the provider."""
        ...
    @property
    def name(self) -> str:
        """Return the name of the auth provider."""
        ...
    @property
    def support_mfa(self) -> bool:
        """Return whether multi-factor auth supported by the auth provider."""
        ...
    async def async_credentials(self) -> list[Credentials]:
        """Return all credentials of this provider."""
        ...
    @callback
    def async_create_credentials(self, data: dict[str, str]) -> Credentials:
        """Create credentials."""
        ...
    async def async_login_flow(self, context: dict[str, Any] | None) -> LoginFlow:
        """Return the data flow for logging in with auth provider.

        Auth provider should extend LoginFlow and return an instance.
        """
        ...
    async def async_get_or_create_credentials(
        self, flow_result: Mapping[str, str]
    ) -> Credentials:
        """Get credentials based on the flow result."""
        ...
    async def async_user_meta_for_credentials(
        self, credentials: Credentials
    ) -> UserMeta:
        """Return extra user metadata for credentials.

        Will be used to populate info when creating a new user.
        """
        ...
    async def async_initialize(self) -> None:
        """Initialize the auth provider."""
        ...
    @callback
    def async_validate_refresh_token(
        self, refresh_token: RefreshToken, remote_ip: str | None = ...
    ) -> None:
        """Verify a refresh token is still valid.

        Optional hook for an auth provider to verify validity of a refresh token.
        Should raise InvalidAuthError on errors.
        """
        ...

async def auth_provider_from_config(
    hass: HomeAssistant, store: AuthStore, config: dict[str, Any]
) -> AuthProvider:
    """Initialize an auth provider from a config."""
    ...

async def load_auth_provider_module(
    hass: HomeAssistant, provider: str
) -> types.ModuleType:
    """Load an auth provider."""
    ...

class LoginFlow(data_entry_flow.FlowHandler):
    """Handler for the login flow."""

    def __init__(self, auth_provider: AuthProvider) -> None:
        """Initialize the login flow."""
        ...
    async def async_step_init(
        self, user_input: dict[str, str] | None = ...
    ) -> FlowResult:
        """Handle the first step of login flow.

        Return self.async_show_form(step_id='init') if user_input is None.
        Return await self.async_finish(flow_result) if login init step pass.
        """
        ...
    async def async_step_select_mfa_module(
        self, user_input: dict[str, str] | None = ...
    ) -> FlowResult:
        """Handle the step of select mfa module."""
        ...
    async def async_step_mfa(
        self, user_input: dict[str, str] | None = ...
    ) -> FlowResult:
        """Handle the step of mfa validation."""
        ...
    async def async_finish(self, flow_result: Any) -> FlowResult:
        """Handle the pass of login flow."""
        ...
