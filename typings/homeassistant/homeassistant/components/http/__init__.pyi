"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import logging
import os
import ssl
from contextvars import ContextVar
from ipaddress import ip_network
from typing import Any, Final, Optional, TypedDict, cast

import homeassistant.helpers.config_validation as cv
import homeassistant.util as hass_util
import voluptuous as vol
from aiohttp import web
from aiohttp.typedefs import StrOrURL
from aiohttp.web_exceptions import HTTPMovedPermanently, HTTPRedirection
from homeassistant.const import EVENT_HOMEASSISTANT_STOP, SERVER_PORT
from homeassistant.core import Event, HomeAssistant
from homeassistant.helpers import storage
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from homeassistant.setup import async_start_setup, async_when_setup_or_start
from homeassistant.util import ssl as ssl_util

from .auth import setup_auth
from .ban import setup_bans
from .const import KEY_AUTHENTICATED, KEY_HASS, KEY_HASS_USER
from .cors import setup_cors
from .forwarded import async_setup_forwarded
from .request_context import setup_request_context
from .security_filter import setup_security_filter
from .static import CACHE_HEADERS, CachingStaticResource
from .view import HomeAssistantView
from .web_runner import HomeAssistantTCPSite

"""
This type stub file was generated by pyright.
"""
DOMAIN: Final = ...
CONF_SERVER_HOST: Final = ...
CONF_SERVER_PORT: Final = ...
CONF_BASE_URL: Final = ...
CONF_SSL_CERTIFICATE: Final = ...
CONF_SSL_PEER_CERTIFICATE: Final = ...
CONF_SSL_KEY: Final = ...
CONF_CORS_ORIGINS: Final = ...
CONF_USE_X_FORWARDED_FOR: Final = ...
CONF_TRUSTED_PROXIES: Final = ...
CONF_LOGIN_ATTEMPTS_THRESHOLD: Final = ...
CONF_IP_BAN_ENABLED: Final = ...
CONF_SSL_PROFILE: Final = ...
SSL_MODERN: Final = ...
SSL_INTERMEDIATE: Final = ...
_LOGGER: Final = ...
DEFAULT_DEVELOPMENT: Final = ...
DEFAULT_CORS: Final[list[str]] = ...
NO_LOGIN_ATTEMPT_THRESHOLD: Final = ...
MAX_CLIENT_SIZE: Final = ...
STORAGE_KEY: Final = ...
STORAGE_VERSION: Final = ...
SAVE_DELAY: Final = ...
HTTP_SCHEMA: Final = ...
CONFIG_SCHEMA: Final = ...

class ConfData(TypedDict, total=False):
    """Typed dict for config data."""

    server_host: list[str]
    server_port: int
    base_url: str
    ssl_certificate: str
    ssl_peer_certificate: str
    ssl_key: str
    cors_allowed_origins: list[str]
    use_x_forwarded_for: bool
    trusted_proxies: list[str]
    login_attempts_threshold: int
    ip_ban_enabled: bool
    ssl_profile: str
    ...

@bind_hass
async def async_get_last_config(hass: HomeAssistant) -> dict | None:
    """Return the last known working config."""
    ...

class ApiConfig:
    """Configuration settings for API server."""

    def __init__(self, local_ip: str, host: str, port: int, use_ssl: bool) -> None:
        """Initialize a new API config object."""
        ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the HTTP API and debug interface."""
    ...

class HomeAssistantHTTP:
    """HTTP server for Home Assistant."""

    def __init__(
        self,
        hass: HomeAssistant,
        ssl_certificate: str | None,
        ssl_peer_certificate: str | None,
        ssl_key: str | None,
        server_host: list[str] | None,
        server_port: int,
        cors_origins: list[str],
        use_x_forwarded_for: bool,
        trusted_proxies: list[str],
        login_threshold: int,
        is_ban_enabled: bool,
        ssl_profile: str,
    ) -> None:
        """Initialize the HTTP Home Assistant server."""
        ...
    def register_view(self, view: HomeAssistantView) -> None:
        """Register a view with the WSGI server.

        The view argument must be a class that inherits from HomeAssistantView.
        It is optional to instantiate it before registering; this method will
        handle it either way.
        """
        ...
    def register_redirect(
        self,
        url: str,
        redirect_to: StrOrURL,
        *,
        redirect_exc: type[HTTPRedirection] = ...
    ) -> None:
        """Register a redirect with the server.

        If given this must be either a string or callable. In case of a
        callable it's called with the url adapter that triggered the match and
        the values of the URL as keyword arguments and has to return the target
        for the redirect, otherwise it has to be a string with placeholders in
        rule syntax.
        """
        ...
    def register_static_path(
        self, url_path: str, path: str, cache_headers: bool = ...
    ) -> web.FileResponse | None:
        """Register a folder or file to serve as a static path."""
        ...
    async def start(self) -> None:
        """Start the aiohttp server."""
        ...
    async def stop(self) -> None:
        """Stop the aiohttp server."""
        ...

async def start_http_server_and_save_config(
    hass: HomeAssistant, conf: dict, server: HomeAssistantHTTP
) -> None:
    """Startup the http server and save the config."""
    ...

current_request: ContextVar[web.Request | None] = ...
