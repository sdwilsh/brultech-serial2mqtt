"""
This type stub file was generated by pyright.
"""

import abc
from collections.abc import Mapping
from typing import Any, TypedDict

import voluptuous as vol

from .core import HomeAssistant, callback
from .exceptions import HomeAssistantError

"""
This type stub file was generated by pyright.
"""
RESULT_TYPE_FORM = ...
RESULT_TYPE_CREATE_ENTRY = ...
RESULT_TYPE_ABORT = ...
RESULT_TYPE_EXTERNAL_STEP = ...
RESULT_TYPE_EXTERNAL_STEP_DONE = ...
RESULT_TYPE_SHOW_PROGRESS = ...
RESULT_TYPE_SHOW_PROGRESS_DONE = ...
EVENT_DATA_ENTRY_FLOW_PROGRESSED = ...

class FlowError(HomeAssistantError):
    """Error while configuring an account."""

    ...

class UnknownHandler(FlowError):
    """Unknown handler specified."""

    ...

class UnknownFlow(FlowError):
    """Unknown flow specified."""

    ...

class UnknownStep(FlowError):
    """Unknown step specified."""

    ...

class AbortFlow(FlowError):
    """Exception to indicate a flow needs to be aborted."""

    def __init__(
        self, reason: str, description_placeholders: dict | None = ...
    ) -> None:
        """Initialize an abort flow exception."""
        ...

class FlowResult(TypedDict, total=False):
    """Typed result dict."""

    version: int
    type: str
    flow_id: str
    handler: str
    title: str
    data: Mapping[str, Any]
    step_id: str
    data_schema: vol.Schema
    extra: str
    required: bool
    errors: dict[str, str] | None
    description: str | None
    description_placeholders: dict[str, Any] | None
    progress_action: str
    url: str
    reason: str
    context: dict[str, Any]
    result: Any
    last_step: bool | None
    options: Mapping[str, Any]
    ...

class FlowManager(abc.ABC):
    """Manage all the flows that are in progress."""

    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize the flow manager."""
        ...
    async def async_wait_init_flow_finish(self, handler: str) -> None:
        """Wait till all flows in progress are initialized."""
        ...
    @abc.abstractmethod
    async def async_create_flow(
        self,
        handler_key: Any,
        *,
        context: dict[str, Any] | None = ...,
        data: dict[str, Any] | None = ...
    ) -> FlowHandler:
        """Create a flow for specified handler.

        Handler key is the domain of the component that we want to set up.
        """
        ...
    @abc.abstractmethod
    async def async_finish_flow(
        self, flow: FlowHandler, result: FlowResult
    ) -> FlowResult:
        """Finish a config flow and add an entry."""
        ...
    async def async_post_init(self, flow: FlowHandler, result: FlowResult) -> None:
        """Entry has finished executing its first step asynchronously."""
        ...
    @callback
    def async_has_matching_flow(
        self, handler: str, context: dict[str, Any], data: Any
    ) -> bool:
        """Check if an existing matching flow is in progress with the same handler, context, and data."""
        ...
    @callback
    def async_get(self, flow_id: str) -> FlowResult | None:
        """Return a flow in progress as a partial FlowResult."""
        ...
    @callback
    def async_progress(self, include_uninitialized: bool = ...) -> list[FlowResult]:
        """Return the flows in progress as a partial FlowResult."""
        ...
    @callback
    def async_progress_by_handler(
        self, handler: str, include_uninitialized: bool = ...
    ) -> list[FlowResult]:
        """Return the flows in progress by handler as a partial FlowResult."""
        ...
    async def async_init(
        self, handler: str, *, context: dict[str, Any] | None = ..., data: Any = ...
    ) -> FlowResult:
        """Start a configuration flow."""
        ...
    async def async_shutdown(self) -> None:
        """Cancel any initializing flows."""
        ...
    async def async_configure(
        self, flow_id: str, user_input: dict | None = ...
    ) -> FlowResult:
        """Continue a configuration flow."""
        ...
    @callback
    def async_abort(self, flow_id: str) -> None:
        """Abort a flow."""
        ...

class FlowHandler:
    """Handle the configuration flow of a component."""

    cur_step: dict[str, Any] | None = ...
    flow_id: str = ...
    hass: HomeAssistant = ...
    handler: str = ...
    context: dict[str, Any] = ...
    init_step = ...
    init_data: Any = ...
    VERSION = ...
    @property
    def source(self) -> str | None:
        """Source that initialized the flow."""
        ...
    @property
    def show_advanced_options(self) -> bool:
        """If we should show advanced options."""
        ...
    @callback
    def async_show_form(
        self,
        *,
        step_id: str,
        data_schema: vol.Schema = ...,
        errors: dict[str, str] | None = ...,
        description_placeholders: dict[str, Any] | None = ...,
        last_step: bool | None = ...
    ) -> FlowResult:
        """Return the definition of a form to gather user input."""
        ...
    @callback
    def async_create_entry(
        self,
        *,
        title: str,
        data: Mapping[str, Any],
        description: str | None = ...,
        description_placeholders: dict | None = ...
    ) -> FlowResult:
        """Finish config flow and create a config entry."""
        ...
    @callback
    def async_abort(
        self, *, reason: str, description_placeholders: dict | None = ...
    ) -> FlowResult:
        """Abort the config flow."""
        ...
    @callback
    def async_external_step(
        self, *, step_id: str, url: str, description_placeholders: dict | None = ...
    ) -> FlowResult:
        """Return the definition of an external step for the user to take."""
        ...
    @callback
    def async_external_step_done(self, *, next_step_id: str) -> FlowResult:
        """Return the definition of an external step for the user to take."""
        ...
    @callback
    def async_show_progress(
        self,
        *,
        step_id: str,
        progress_action: str,
        description_placeholders: dict | None = ...
    ) -> FlowResult:
        """Show a progress message to the user, without user input allowed."""
        ...
    @callback
    def async_show_progress_done(self, *, next_step_id: str) -> FlowResult:
        """Mark the progress done."""
        ...
