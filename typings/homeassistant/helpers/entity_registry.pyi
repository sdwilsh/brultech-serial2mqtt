"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Iterable, Mapping
from typing import TYPE_CHECKING, Any

import attr
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import Event, HomeAssistant, callback
from homeassistant.loader import bind_hass

from .typing import UndefinedType

"""Provide a registry to track entity IDs.

The Entity Registry keeps a registry of entities. Entities are uniquely
identified by their domain, platform and a unique id provided by that platform.

The Entity Registry will persist itself 10 seconds after a new entity is
registered. Registering a new entity while a timer is in progress resets the
timer.
"""
if TYPE_CHECKING: ...
PATH_REGISTRY = ...
DATA_REGISTRY = ...
EVENT_ENTITY_REGISTRY_UPDATED = ...
SAVE_DELAY = ...
_LOGGER = ...
DISABLED_CONFIG_ENTRY = ...
DISABLED_DEVICE = ...
DISABLED_HASS = ...
DISABLED_INTEGRATION = ...
DISABLED_USER = ...
STORAGE_VERSION = ...
STORAGE_KEY = ...
ENTITY_DESCRIBING_ATTRIBUTES = ...

@attr.s(slots=True, frozen=True)
class RegistryEntry:
    """Entity Registry Entry."""

    entity_id: str = ...
    unique_id: str = ...
    platform: str = ...
    name: str | None = ...
    icon: str | None = ...
    device_id: str | None = ...
    area_id: str | None = ...
    config_entry_id: str | None = ...
    disabled_by: str | None = ...
    capabilities: Mapping[str, Any] | None = ...
    supported_features: int = ...
    device_class: str | None = ...
    unit_of_measurement: str | None = ...
    original_name: str | None = ...
    original_icon: str | None = ...
    entity_category: str | None = ...
    domain: str = ...
    @property
    def disabled(self) -> bool:
        """Return if entry is disabled."""
        ...
    @callback
    def write_unavailable_state(self, hass: HomeAssistant) -> None:
        """Write the unavailable state to the state machine."""
        ...

class EntityRegistry:
    """Class to hold a registry of entities."""

    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize the registry."""
        ...
    @callback
    def async_get_device_class_lookup(
        self, domain_device_classes: set[tuple[str, str | None]]
    ) -> dict:
        """Return a lookup of entity ids for devices which have matching entities.

        Entities must match a set of (domain, device_class) tuples.
        The result is indexed by device_id, then by the matching (domain, device_class)
        """
        ...
    @callback
    def async_is_registered(self, entity_id: str) -> bool:
        """Check if an entity_id is currently registered."""
        ...
    @callback
    def async_get(self, entity_id: str) -> RegistryEntry | None:
        """Get EntityEntry for an entity_id."""
        ...
    @callback
    def async_get_entity_id(
        self, domain: str, platform: str, unique_id: str
    ) -> str | None:
        """Check if an entity_id is currently registered."""
        ...
    @callback
    def async_generate_entity_id(
        self,
        domain: str,
        suggested_object_id: str,
        known_object_ids: Iterable[str] | None = ...,
    ) -> str:
        """Generate an entity ID that does not conflict.

        Conflicts checked against registered and currently existing entities.
        """
        ...
    @callback
    def async_get_or_create(
        self,
        domain: str,
        platform: str,
        unique_id: str,
        *,
        known_object_ids: Iterable[str] | None = ...,
        suggested_object_id: str | None = ...,
        disabled_by: str | None = ...,
        area_id: str | None = ...,
        capabilities: Mapping[str, Any] | None = ...,
        config_entry: ConfigEntry | None = ...,
        device_class: str | None = ...,
        device_id: str | None = ...,
        entity_category: str | None = ...,
        original_icon: str | None = ...,
        original_name: str | None = ...,
        supported_features: int | None = ...,
        unit_of_measurement: str | None = ...
    ) -> RegistryEntry:
        """Get entity. Create if it doesn't exist."""
        ...
    @callback
    def async_remove(self, entity_id: str) -> None:
        """Remove an entity from registry."""
        ...
    @callback
    def async_device_modified(self, event: Event) -> None:
        """Handle the removal or update of a device.

        Remove entities from the registry that are associated to a device when
        the device is removed.

        Disable entities in the registry that are associated to a device when
        the device is disabled.
        """
        ...
    @callback
    def async_update_entity(
        self,
        entity_id: str,
        *,
        area_id: str | None | UndefinedType = ...,
        config_entry_id: str | None | UndefinedType = ...,
        device_class: str | None | UndefinedType = ...,
        disabled_by: str | None | UndefinedType = ...,
        entity_category: str | None | UndefinedType = ...,
        icon: str | None | UndefinedType = ...,
        name: str | None | UndefinedType = ...,
        new_entity_id: str | UndefinedType = ...,
        new_unique_id: str | UndefinedType = ...,
        original_icon: str | None | UndefinedType = ...,
        original_name: str | None | UndefinedType = ...,
        unit_of_measurement: str | None | UndefinedType = ...
    ) -> RegistryEntry:
        """Update properties of an entity."""
        ...
    async def async_load(self) -> None:
        """Load the entity registry."""
        ...
    @callback
    def async_schedule_save(self) -> None:
        """Schedule saving the entity registry."""
        ...
    @callback
    def async_clear_config_entry(self, config_entry: str) -> None:
        """Clear config entry from registry entries."""
        ...
    @callback
    def async_clear_area_id(self, area_id: str) -> None:
        """Clear area id from registry entries."""
        ...

@callback
def async_get(hass: HomeAssistant) -> EntityRegistry:
    """Get entity registry."""
    ...

async def async_load(hass: HomeAssistant) -> None:
    """Load entity registry."""
    ...

@bind_hass
async def async_get_registry(hass: HomeAssistant) -> EntityRegistry:
    """Get entity registry.

    This is deprecated and will be removed in the future. Use async_get instead.
    """
    ...

@callback
def async_entries_for_device(
    registry: EntityRegistry, device_id: str, include_disabled_entities: bool = ...
) -> list[RegistryEntry]:
    """Return entries that match a device."""
    ...

@callback
def async_entries_for_area(
    registry: EntityRegistry, area_id: str
) -> list[RegistryEntry]:
    """Return entries that match an area."""
    ...

@callback
def async_entries_for_config_entry(
    registry: EntityRegistry, config_entry_id: str
) -> list[RegistryEntry]:
    """Return entries that match a config entry."""
    ...

@callback
def async_config_entry_disabled_by_changed(
    registry: EntityRegistry, config_entry: ConfigEntry
) -> None:
    """Handle a config entry being disabled or enabled.

    Disable entities in the registry that are associated with a config entry when
    the config entry is disabled, enable entities in the registry that are associated
    with a config entry when the config entry is enabled and the entities are marked
    DISABLED_CONFIG_ENTRY.
    """
    ...

@callback
def async_setup_entity_restore(hass: HomeAssistant, registry: EntityRegistry) -> None:
    """Set up the entity restore mechanism."""
    ...

async def async_migrate_entries(
    hass: HomeAssistant,
    config_entry_id: str,
    entry_callback: Callable[[RegistryEntry], dict | None],
) -> None:
    """Migrator of unique IDs."""
    ...
