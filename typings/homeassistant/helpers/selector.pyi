"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Mapping, Sequence
from enum import StrEnum
from typing import Any, Generic, Literal, Required, TypeVar, TypedDict
from homeassistant.util import decorator

"""Selectors for Home Assistant."""
SELECTORS: decorator.Registry[str, type[Selector]] = ...
_T = TypeVar("_T", bound=Mapping[str, Any])

def selector(config: Any) -> Selector:
    """Instantiate a selector."""
    ...

def validate_selector(config: Any) -> dict:
    """Validate a selector."""
    ...

class Selector(Generic[_T]):
    """Base class for selectors."""

    CONFIG_SCHEMA: Callable
    config: _T
    selector_type: str
    def __init__(self, config: Mapping[str, Any] | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def serialize(self) -> dict[str, dict[str, _T]]:
        """Serialize Selector for voluptuous_serialize."""
        ...

ENTITY_FILTER_SELECTOR_CONFIG_SCHEMA = ...

class EntityFilterSelectorConfig(TypedDict, total=False):
    """Class to represent a single entity selector config."""

    integration: str
    domain: str | list[str]
    device_class: str | list[str]
    supported_features: list[str]
    ...

DEVICE_FILTER_SELECTOR_CONFIG_SCHEMA = ...

class DeviceFilterSelectorConfig(TypedDict, total=False):
    """Class to represent a single device selector config."""

    integration: str
    manufacturer: str
    model: str
    ...

class ActionSelectorConfig(TypedDict):
    """Class to represent an action selector config."""

    ...

@SELECTORS.register("action")
class ActionSelector(Selector[ActionSelectorConfig]):
    """Selector of an action sequence (script syntax)."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ActionSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class AddonSelectorConfig(TypedDict, total=False):
    """Class to represent an addon selector config."""

    name: str
    slug: str
    ...

@SELECTORS.register("addon")
class AddonSelector(Selector[AddonSelectorConfig]):
    """Selector of a add-on."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: AddonSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class AreaSelectorConfig(TypedDict, total=False):
    """Class to represent an area selector config."""

    entity: EntityFilterSelectorConfig | list[EntityFilterSelectorConfig]
    device: DeviceFilterSelectorConfig | list[DeviceFilterSelectorConfig]
    multiple: bool
    ...

@SELECTORS.register("area")
class AreaSelector(Selector[AreaSelectorConfig]):
    """Selector of a single or list of areas."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: AreaSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str | list[str]:
        """Validate the passed selection."""
        ...

class AssistPipelineSelectorConfig(TypedDict, total=False):
    """Class to represent an assist pipeline selector config."""

    ...

@SELECTORS.register("assist_pipeline")
class AssistPipelineSelector(Selector[AssistPipelineSelectorConfig]):
    """Selector for an assist pipeline."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: AssistPipelineSelectorConfig) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class AttributeSelectorConfig(TypedDict, total=False):
    """Class to represent an attribute selector config."""

    entity_id: Required[str]
    hide_attributes: list[str]
    ...

@SELECTORS.register("attribute")
class AttributeSelector(Selector[AttributeSelectorConfig]):
    """Selector for an entity attribute."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: AttributeSelectorConfig) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class BackupLocationSelectorConfig(TypedDict, total=False):
    """Class to represent a backup location selector config."""

    ...

@SELECTORS.register("backup_location")
class BackupLocationSelector(Selector[BackupLocationSelectorConfig]):
    """Selector of a backup location."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: BackupLocationSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class BooleanSelectorConfig(TypedDict):
    """Class to represent a boolean selector config."""

    ...

@SELECTORS.register("boolean")
class BooleanSelector(Selector[BooleanSelectorConfig]):
    """Selector of a boolean value."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: BooleanSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> bool:
        """Validate the passed selection."""
        ...

class ColorRGBSelectorConfig(TypedDict):
    """Class to represent a color RGB selector config."""

    ...

@SELECTORS.register("color_rgb")
class ColorRGBSelector(Selector[ColorRGBSelectorConfig]):
    """Selector of an RGB color value."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ColorRGBSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> list[int]:
        """Validate the passed selection."""
        ...

class ColorTempSelectorConfig(TypedDict, total=False):
    """Class to represent a color temp selector config."""

    unit: ColorTempSelectorUnit
    min: int
    max: int
    max_mireds: int
    min_mireds: int
    ...

class ColorTempSelectorUnit(StrEnum):
    """Possible units for a color temperature selector."""

    KELVIN = ...
    MIRED = ...

@SELECTORS.register("color_temp")
class ColorTempSelector(Selector[ColorTempSelectorConfig]):
    """Selector of an color temperature."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ColorTempSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> int:
        """Validate the passed selection."""
        ...

class ConditionSelectorConfig(TypedDict):
    """Class to represent an condition selector config."""

    ...

@SELECTORS.register("condition")
class ConditionSelector(Selector[ConditionSelectorConfig]):
    """Selector of an condition sequence (script syntax)."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ConditionSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class ConfigEntrySelectorConfig(TypedDict, total=False):
    """Class to represent a config entry selector config."""

    integration: str
    ...

@SELECTORS.register("config_entry")
class ConfigEntrySelector(Selector[ConfigEntrySelectorConfig]):
    """Selector of a config entry."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ConfigEntrySelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class ConstantSelectorConfig(TypedDict, total=False):
    """Class to represent a constant selector config."""

    label: str
    translation_key: str
    value: str | int | bool
    ...

@SELECTORS.register("constant")
class ConstantSelector(Selector[ConstantSelectorConfig]):
    """Constant selector."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ConstantSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class ConversationAgentSelectorConfig(TypedDict, total=False):
    """Class to represent a conversation agent selector config."""

    language: str
    ...

@SELECTORS.register("conversation_agent")
class ConversationAgentSelector(Selector[ConversationAgentSelectorConfig]):
    """Selector for a conversation agent."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ConversationAgentSelectorConfig) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class CountrySelectorConfig(TypedDict, total=False):
    """Class to represent a country selector config."""

    countries: list[str]
    no_sort: bool
    ...

@SELECTORS.register("country")
class CountrySelector(Selector[CountrySelectorConfig]):
    """Selector for a single-choice country select."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: CountrySelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class DateSelectorConfig(TypedDict):
    """Class to represent a date selector config."""

    ...

@SELECTORS.register("date")
class DateSelector(Selector[DateSelectorConfig]):
    """Selector of a date."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: DateSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class DateTimeSelectorConfig(TypedDict):
    """Class to represent a date time selector config."""

    ...

@SELECTORS.register("datetime")
class DateTimeSelector(Selector[DateTimeSelectorConfig]):
    """Selector of a datetime."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: DateTimeSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class DeviceSelectorConfig(DeviceFilterSelectorConfig, total=False):
    """Class to represent a device selector config."""

    entity: EntityFilterSelectorConfig | list[EntityFilterSelectorConfig]
    multiple: bool
    filter: DeviceFilterSelectorConfig | list[DeviceFilterSelectorConfig]
    ...

@SELECTORS.register("device")
class DeviceSelector(Selector[DeviceSelectorConfig]):
    """Selector of a single or list of devices."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: DeviceSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str | list[str]:
        """Validate the passed selection."""
        ...

class DurationSelectorConfig(TypedDict, total=False):
    """Class to represent a duration selector config."""

    enable_day: bool
    ...

@SELECTORS.register("duration")
class DurationSelector(Selector[DurationSelectorConfig]):
    """Selector for a duration."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: DurationSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> dict[str, float]:
        """Validate the passed selection."""
        ...

class EntitySelectorConfig(EntityFilterSelectorConfig, total=False):
    """Class to represent an entity selector config."""

    exclude_entities: list[str]
    include_entities: list[str]
    multiple: bool
    filter: EntityFilterSelectorConfig | list[EntityFilterSelectorConfig]
    ...

@SELECTORS.register("entity")
class EntitySelector(Selector[EntitySelectorConfig]):
    """Selector of a single or list of entities."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: EntitySelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str | list[str]:
        """Validate the passed selection."""
        ...

class IconSelectorConfig(TypedDict, total=False):
    """Class to represent an icon selector config."""

    placeholder: str
    ...

@SELECTORS.register("icon")
class IconSelector(Selector[IconSelectorConfig]):
    """Selector for an icon."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: IconSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class LanguageSelectorConfig(TypedDict, total=False):
    """Class to represent an language selector config."""

    languages: list[str]
    native_name: bool
    no_sort: bool
    ...

@SELECTORS.register("language")
class LanguageSelector(Selector[LanguageSelectorConfig]):
    """Selector for an language."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: LanguageSelectorConfig) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class LocationSelectorConfig(TypedDict, total=False):
    """Class to represent a location selector config."""

    radius: bool
    icon: str
    ...

@SELECTORS.register("location")
class LocationSelector(Selector[LocationSelectorConfig]):
    """Selector for a location."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    DATA_SCHEMA = ...
    def __init__(self, config: LocationSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> dict[str, float]:
        """Validate the passed selection."""
        ...

class MediaSelectorConfig(TypedDict):
    """Class to represent a media selector config."""

    ...

@SELECTORS.register("media")
class MediaSelector(Selector[MediaSelectorConfig]):
    """Selector for media."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    DATA_SCHEMA = ...
    def __init__(self, config: MediaSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> dict[str, float]:
        """Validate the passed selection."""
        ...

class NumberSelectorConfig(TypedDict, total=False):
    """Class to represent a number selector config."""

    min: float
    max: float
    step: float | Literal["any"]
    unit_of_measurement: str
    mode: NumberSelectorMode
    ...

class NumberSelectorMode(StrEnum):
    """Possible modes for a number selector."""

    BOX = ...
    SLIDER = ...

def validate_slider(data: Any) -> Any:
    """Validate configuration."""
    ...
@SELECTORS.register("number")
class NumberSelector(Selector[NumberSelectorConfig]):
    """Selector of a numeric value."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: NumberSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> float:
        """Validate the passed selection."""
        ...

class ObjectSelectorConfig(TypedDict):
    """Class to represent an object selector config."""

    ...

@SELECTORS.register("object")
class ObjectSelector(Selector[ObjectSelectorConfig]):
    """Selector for an arbitrary object."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ObjectSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

select_option = ...

class SelectOptionDict(TypedDict):
    """Class to represent a select option dict."""

    value: str
    label: str
    ...

class SelectSelectorMode(StrEnum):
    """Possible modes for a number selector."""

    LIST = ...
    DROPDOWN = ...

class SelectSelectorConfig(TypedDict, total=False):
    """Class to represent a select selector config."""

    options: Required[Sequence[SelectOptionDict] | Sequence[str]]
    multiple: bool
    custom_value: bool
    mode: SelectSelectorMode
    translation_key: str
    sort: bool
    ...

@SELECTORS.register("select")
class SelectSelector(Selector[SelectSelectorConfig]):
    """Selector for an single-choice input select."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: SelectSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class TargetSelectorConfig(TypedDict, total=False):
    """Class to represent a target selector config."""

    entity: EntityFilterSelectorConfig | list[EntityFilterSelectorConfig]
    device: DeviceFilterSelectorConfig | list[DeviceFilterSelectorConfig]
    ...

class StateSelectorConfig(TypedDict, total=False):
    """Class to represent an state selector config."""

    entity_id: Required[str]
    ...

@SELECTORS.register("state")
class StateSelector(Selector[StateSelectorConfig]):
    """Selector for an entity state."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: StateSelectorConfig) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

@SELECTORS.register("target")
class TargetSelector(Selector[TargetSelectorConfig]):
    """Selector of a target value (area ID, device ID, entity ID etc).

    Value should follow cv.TARGET_SERVICE_FIELDS format.
    """

    selector_type = ...
    CONFIG_SCHEMA = ...
    TARGET_SELECTION_SCHEMA = ...
    def __init__(self, config: TargetSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> dict[str, list[str]]:
        """Validate the passed selection."""
        ...

class TemplateSelectorConfig(TypedDict):
    """Class to represent an template selector config."""

    ...

@SELECTORS.register("template")
class TemplateSelector(Selector[TemplateSelectorConfig]):
    """Selector for an template."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: TemplateSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class TextSelectorConfig(TypedDict, total=False):
    """Class to represent a text selector config."""

    multiline: bool
    prefix: str
    suffix: str
    type: TextSelectorType
    autocomplete: str
    multiple: bool
    ...

class TextSelectorType(StrEnum):
    """Enum for text selector types."""

    COLOR = ...
    DATE = ...
    DATETIME_LOCAL = ...
    EMAIL = ...
    MONTH = ...
    NUMBER = ...
    PASSWORD = ...
    SEARCH = ...
    TEL = ...
    TEXT = ...
    TIME = ...
    URL = ...
    WEEK = ...

@SELECTORS.register("text")
class TextSelector(Selector[TextSelectorConfig]):
    """Selector for a multi-line text string."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: TextSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str | list[str]:
        """Validate the passed selection."""
        ...

class ThemeSelectorConfig(TypedDict):
    """Class to represent a theme selector config."""

    ...

@SELECTORS.register("theme")
class ThemeSelector(Selector[ThemeSelectorConfig]):
    """Selector for an theme."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: ThemeSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class TimeSelectorConfig(TypedDict):
    """Class to represent a time selector config."""

    ...

@SELECTORS.register("time")
class TimeSelector(Selector[TimeSelectorConfig]):
    """Selector of a time value."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: TimeSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...

class TriggerSelectorConfig(TypedDict):
    """Class to represent an trigger selector config."""

    ...

@SELECTORS.register("trigger")
class TriggerSelector(Selector[TriggerSelectorConfig]):
    """Selector of a trigger sequence (script syntax)."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: TriggerSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> Any:
        """Validate the passed selection."""
        ...

class FileSelectorConfig(TypedDict):
    """Class to represent a file selector config."""

    accept: str
    ...

@SELECTORS.register("file")
class FileSelector(Selector[FileSelectorConfig]):
    """Selector of a file."""

    selector_type = ...
    CONFIG_SCHEMA = ...
    def __init__(self, config: FileSelectorConfig | None = ...) -> None:
        """Instantiate a selector."""
        ...

    def __call__(self, data: Any) -> str:
        """Validate the passed selection."""
        ...
