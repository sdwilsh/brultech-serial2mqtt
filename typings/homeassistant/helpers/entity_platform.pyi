"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from collections.abc import Callable, Iterable
from contextvars import ContextVar
from datetime import timedelta
from logging import Logger
from typing import Any, Protocol, TYPE_CHECKING
from homeassistant import config_entries
from homeassistant.core import HomeAssistant, ServiceCall, SupportsResponse, callback
from .typing import ConfigType, DiscoveryInfoType
from .entity import Entity

"""Class to manage the entities for a single platform."""
if TYPE_CHECKING: ...
SLOW_SETUP_WARNING = ...
SLOW_SETUP_MAX_WAIT = ...
SLOW_ADD_ENTITY_MAX_WAIT = ...
SLOW_ADD_MIN_TIMEOUT = ...
PLATFORM_NOT_READY_RETRIES = ...
DATA_ENTITY_PLATFORM = ...
PLATFORM_NOT_READY_BASE_WAIT_TIME = ...
_LOGGER = ...

class AddEntitiesCallback(Protocol):
    """Protocol type for EntityPlatform.add_entities callback."""
    def __call__(
        self, new_entities: Iterable[Entity], update_before_add: bool = ...
    ) -> None:
        """Define add_entities type."""
        ...

class EntityPlatformModule(Protocol):
    """Protocol type for entity platform modules."""
    async def async_setup_platform(
        self,
        hass: HomeAssistant,
        config: ConfigType,
        async_add_entities: AddEntitiesCallback,
        discovery_info: DiscoveryInfoType | None = ...,
    ) -> None:
        """Set up an integration platform async."""
        ...

    def setup_platform(
        self,
        hass: HomeAssistant,
        config: ConfigType,
        add_entities: AddEntitiesCallback,
        discovery_info: DiscoveryInfoType | None = ...,
    ) -> None:
        """Set up an integration platform."""
        ...

    async def async_setup_entry(
        self,
        hass: HomeAssistant,
        entry: config_entries.ConfigEntry,
        async_add_entities: AddEntitiesCallback,
    ) -> None:
        """Set up an integration platform from a config entry."""
        ...

class EntityPlatform:
    """Manage the entities for a single platform."""
    def __init__(
        self,
        *,
        hass: HomeAssistant,
        logger: Logger,
        domain: str,
        platform_name: str,
        platform: EntityPlatformModule | None,
        scan_interval: timedelta,
        entity_namespace: str | None,
    ) -> None:
        """Initialize the entity platform."""
        ...

    def __repr__(self) -> str:
        """Represent an EntityPlatform."""
        ...

    async def async_setup(
        self,
        platform_config: ConfigType,
        discovery_info: DiscoveryInfoType | None = ...,
    ) -> None:
        """Set up the platform from a config file."""
        ...

    async def async_shutdown(self) -> None:
        """Call when Home Assistant is stopping."""
        ...

    @callback
    def async_cancel_retry_setup(self) -> None:
        """Cancel retry setup."""
        ...

    async def async_setup_entry(self, config_entry: config_entries.ConfigEntry) -> bool:
        """Set up the platform from a config entry."""
        ...

    def add_entities(
        self, new_entities: Iterable[Entity], update_before_add: bool = ...
    ) -> None:
        """Add entities for a single platform."""
        ...

    async def async_add_entities(
        self, new_entities: Iterable[Entity], update_before_add: bool = ...
    ) -> None:
        """Add entities for a single platform async.

        This method must be run in the event loop.
        """
        ...

    async def async_reset(self) -> None:
        """Remove all entities and reset data.

        This method must be run in the event loop.
        """
        ...

    @callback
    def async_unsub_polling(self) -> None:
        """Stop polling."""
        ...

    async def async_destroy(self) -> None:
        """Destroy an entity platform.

        Call before discarding the object.
        """
        ...

    async def async_remove_entity(self, entity_id: str) -> None:
        """Remove entity id from platform."""
        ...

    async def async_extract_from_service(
        self, service_call: ServiceCall, expand_group: bool = ...
    ) -> list[Entity]:
        """Extract all known and available entities from a service call.

        Will return an empty list if entities specified but unknown.

        This method must be run in the event loop.
        """
        ...

    @callback
    def async_register_entity_service(
        self,
        name: str,
        schema: dict[str | vol.Marker, Any] | vol.Schema,
        func: str | Callable[..., Any],
        required_features: Iterable[int] | None = ...,
        supports_response: SupportsResponse = ...,
    ) -> None:
        """Register an entity service.

        Services will automatically be shared by all platforms of the same domain.
        """
        ...

current_platform: ContextVar[EntityPlatform | None] = ...

@callback
def async_get_current_platform() -> EntityPlatform:
    """Get the current platform from context."""
    ...

@callback
def async_get_platforms(
    hass: HomeAssistant, integration_name: str
) -> list[EntityPlatform]:
    """Find existing platforms."""
    ...
