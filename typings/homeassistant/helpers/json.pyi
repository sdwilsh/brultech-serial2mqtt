"""
This type stub file was generated by pyright.
"""

import json
from collections.abc import Callable
from typing import Any, Final, TYPE_CHECKING

"""Helpers to help with encoding Home Assistant objects in JSON."""
_LOGGER = ...

class JSONEncoder(json.JSONEncoder):
    """JSONEncoder that supports Home Assistant objects."""
    def default(self, o: Any) -> Any:
        """Convert Home Assistant objects.

        Hand other objects to the original method.
        """
        ...

def json_encoder_default(obj: Any) -> Any:
    """Convert Home Assistant objects.

    Hand other objects to the original method.
    """
    ...

if TYPE_CHECKING:
    def json_bytes(obj: Any) -> bytes:
        """Dump json bytes."""
        ...

else: ...

class ExtendedJSONEncoder(JSONEncoder):
    """JSONEncoder that supports Home Assistant objects and falls back to repr(o)."""
    def default(self, o: Any) -> Any:
        """Convert certain objects.

        Fall back to repr(o).
        """
        ...

def json_bytes_strip_null(data: Any) -> bytes:
    """Dump json bytes after terminating strings at the first NUL."""
    ...

def json_dumps(data: Any) -> str:
    r"""Dump json string.

    orjson supports serializing dataclasses natively which
    eliminates the need to implement as_dict in many places
    when the data is already in a dataclass. This works
    well as long as all the data in the dataclass can also
    be serialized.

    If it turns out to be a problem we can disable this
    with option \|= orjson.OPT_PASSTHROUGH_DATACLASS and it
    will fallback to as_dict
    """
    ...

def json_dumps_sorted(data: Any) -> str:
    """Dump json string with keys sorted."""
    ...

JSON_DUMP: Final = ...

def save_json(
    filename: str,
    data: list | dict,
    private: bool = ...,
    *,
    encoder: type[json.JSONEncoder] | None = ...,
    atomic_writes: bool = ...,
) -> None:
    """Save JSON data to a file."""
    ...

def find_paths_unserializable_data(
    bad_data: Any, *, dump: Callable[[Any], str] = ...
) -> dict[str, Any]:
    """Find the paths to unserializable data.

    This method is slow! Only use for error handling.
    """
    ...
