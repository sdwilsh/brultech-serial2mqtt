"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable, Mapping, Sequence
from json import JSONEncoder
from typing import Any, Generic, TypeVar
from homeassistant.core import HomeAssistant, callback
from homeassistant.loader import bind_hass

"""Helper to help store data."""
STORAGE_DIR = ...
_LOGGER = ...
STORAGE_SEMAPHORE = ...
_T = TypeVar("_T", bound=Mapping[str, Any] | Sequence[Any])

@bind_hass
async def async_migrator(
    hass: HomeAssistant,
    old_path: str,
    store: Store[_T],
    *,
    old_conf_load_func: Callable | None = ...,
    old_conf_migrate_func: Callable | None = ...,
) -> _T | None:
    """Migrate old data to a store and then load data.

    async def old_conf_migrate_func(old_data)
    """
    ...
@bind_hass
class Store(Generic[_T]):
    """Class to help storing data."""
    def __init__(
        self,
        hass: HomeAssistant,
        version: int,
        key: str,
        private: bool = ...,
        *,
        atomic_writes: bool = ...,
        encoder: type[JSONEncoder] | None = ...,
        minor_version: int = ...,
        read_only: bool = ...,
    ) -> None:
        """Initialize storage class."""
        ...

    @property
    def path(self):  # -> str:
        """Return the config path."""
        ...

    async def async_load(self) -> _T | None:
        """Load data.

        If the expected version and minor version do not match the given
        versions, the migrate function will be invoked with
        migrate_func(version, minor_version, config).

        Will ensure that when a call comes in while another one is in progress,
        the second call will wait and return the result of the first call.
        """
        ...

    async def async_save(self, data: _T) -> None:
        """Save data."""
        ...

    @callback
    def async_delay_save(self, data_func: Callable[[], _T], delay: float = ...) -> None:
        """Save data with an optional delay."""
        ...

    async def async_remove(self) -> None:
        """Remove all data."""
        ...
