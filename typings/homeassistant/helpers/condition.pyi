"""
This type stub file was generated by pyright.
"""

from collections.abc import Container, Generator
from contextlib import contextmanager
from datetime import timedelta
from typing import Any, Callable

import homeassistant.util.dt as dt_util
from homeassistant.core import HomeAssistant, State, callback
from homeassistant.helpers.template import Template
from homeassistant.helpers.typing import ConfigType, TemplateVarsType

from .trace import TraceElement

"""Offer reusable conditions."""
FROM_CONFIG_FORMAT = ...
ASYNC_FROM_CONFIG_FORMAT = ...
_LOGGER = ...
INPUT_ENTITY_ID = ...
ConditionCheckerType = Callable[[HomeAssistant, TemplateVarsType], bool]

def condition_trace_append(variables: TemplateVarsType, path: str) -> TraceElement:
    """Append a TraceElement to trace[path]."""
    ...

def condition_trace_set_result(result: bool, **kwargs: Any) -> None:
    """Set the result of TraceElement at the top of the stack."""
    ...

def condition_trace_update_result(**kwargs: Any) -> None:
    """Update the result of TraceElement at the top of the stack."""
    ...

@contextmanager
def trace_condition(variables: TemplateVarsType) -> Generator[TraceElement, None, None]:
    """Trace condition evaluation."""
    ...

def trace_condition_function(condition: ConditionCheckerType) -> ConditionCheckerType:
    """Wrap a condition function to enable basic tracing."""
    ...

async def async_from_config(
    hass: HomeAssistant, config: ConfigType | Template, config_validation: bool = ...
) -> ConditionCheckerType:
    """Turn a condition configuration into a method.

    Should be run on the event loop.
    """
    ...

async def async_and_from_config(
    hass: HomeAssistant, config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Create multi condition matcher using 'AND'."""
    ...

async def async_or_from_config(
    hass: HomeAssistant, config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Create multi condition matcher using 'OR'."""
    ...

async def async_not_from_config(
    hass: HomeAssistant, config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Create multi condition matcher using 'NOT'."""
    ...

def numeric_state(
    hass: HomeAssistant,
    entity: None | str | State,
    below: float | str | None = ...,
    above: float | str | None = ...,
    value_template: Template | None = ...,
    variables: TemplateVarsType = ...,
) -> bool:
    """Test a numeric state condition."""
    ...

def async_numeric_state(
    hass: HomeAssistant,
    entity: None | str | State,
    below: float | str | None = ...,
    above: float | str | None = ...,
    value_template: Template | None = ...,
    variables: TemplateVarsType = ...,
    attribute: str | None = ...,
) -> bool:
    """Test a numeric state condition."""
    ...

def async_numeric_state_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with state based condition."""
    ...

def state(
    hass: HomeAssistant,
    entity: None | str | State,
    req_state: Any,
    for_period: timedelta | None = ...,
    attribute: str | None = ...,
) -> bool:
    """Test if state matches requirements.

    Async friendly.
    """
    ...

def state_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with state based condition."""
    ...

def sun(
    hass: HomeAssistant,
    before: str | None = ...,
    after: str | None = ...,
    before_offset: timedelta | None = ...,
    after_offset: timedelta | None = ...,
) -> bool:
    """Test if current time matches sun requirements."""
    ...

def sun_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with sun based condition."""
    ...

def template(
    hass: HomeAssistant, value_template: Template, variables: TemplateVarsType = ...
) -> bool:
    """Test if template condition matches."""
    ...

def async_template(
    hass: HomeAssistant,
    value_template: Template,
    variables: TemplateVarsType = ...,
    trace_result: bool = ...,
) -> bool:
    """Test if template condition matches."""
    ...

def async_template_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with state based condition."""
    ...

def time(
    hass: HomeAssistant,
    before: dt_util.dt.time | str | None = ...,
    after: dt_util.dt.time | str | None = ...,
    weekday: None | str | Container[str] = ...,
) -> bool:
    """Test if local time condition matches.

    Handle the fact that time is continuous and we may be testing for
    a period that crosses midnight. In that case it is easier to test
    for the opposite. "(23:59 <= now < 00:01)" would be the same as
    "not (00:01 <= now < 23:59)".
    """
    ...

def time_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with time based condition."""
    ...

def zone(
    hass: HomeAssistant, zone_ent: None | str | State, entity: None | str | State
) -> bool:
    """Test if zone-condition matches.

    Async friendly.
    """
    ...

def zone_from_config(
    config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Wrap action method with zone based condition."""
    ...

async def async_device_from_config(
    hass: HomeAssistant, config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Test a device condition."""
    ...

async def async_trigger_from_config(
    hass: HomeAssistant, config: ConfigType, config_validation: bool = ...
) -> ConditionCheckerType:
    """Test a trigger condition."""
    ...

async def async_validate_condition_config(
    hass: HomeAssistant, config: ConfigType | Template
) -> ConfigType | Template:
    """Validate config."""
    ...

@callback
def async_extract_entities(config: ConfigType | Template) -> set[str]:
    """Extract entities from a condition."""
    ...

@callback
def async_extract_devices(config: ConfigType | Template) -> set[str]:
    """Extract devices from a condition."""
    ...
