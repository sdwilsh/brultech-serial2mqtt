"""
This type stub file was generated by pyright.
"""

from collections import deque
from collections.abc import Callable, Generator
from contextlib import contextmanager
from contextvars import ContextVar
from typing import Any

from homeassistant.helpers.typing import TemplateVarsType

"""Helpers for script and condition tracing."""

class TraceElement:
    """Container for trace data."""

    def __init__(self, variables: TemplateVarsType, path: str) -> None:
        """Container for trace data."""
        ...
    def __repr__(self) -> str:
        """Container for trace data."""
        ...
    def set_child_id(self, child_key: str, child_run_id: str) -> None:
        """Set trace id of a nested script run."""
        ...
    def set_error(self, ex: Exception) -> None:
        """Set error."""
        ...
    def set_result(self, **kwargs: Any) -> None:
        """Set result."""
        ...
    def update_result(self, **kwargs: Any) -> None:
        """Set result."""
        ...
    def as_dict(self) -> dict[str, Any]:
        """Return dictionary version of this TraceElement."""
        ...

trace_cv: ContextVar[dict[str, deque[TraceElement]] | None] = ...
trace_stack_cv: ContextVar[list[TraceElement] | None] = ...
trace_path_stack_cv: ContextVar[list[str] | None] = ...
variables_cv: ContextVar[Any | None] = ...
trace_id_cv: ContextVar[tuple[str, str] | None] = ...
script_execution_cv: ContextVar[StopReason | None] = ...

def trace_id_set(trace_id: tuple[str, str]) -> None:
    """Set id of the current trace."""
    ...

def trace_id_get() -> tuple[str, str] | None:
    """Get id if the current trace."""
    ...

def trace_stack_push(trace_stack_var: ContextVar, node: Any) -> None:
    """Push an element to the top of a trace stack."""
    ...

def trace_stack_pop(trace_stack_var: ContextVar) -> None:
    """Remove the top element from a trace stack."""
    ...

def trace_stack_top(trace_stack_var: ContextVar) -> Any | None:
    """Return the element at the top of a trace stack."""
    ...

def trace_path_push(suffix: str | list[str]) -> int:
    """Go deeper in the config tree."""
    ...

def trace_path_pop(count: int) -> None:
    """Go n levels up in the config tree."""
    ...

def trace_path_get() -> str:
    """Return a string representing the current location in the config tree."""
    ...

def trace_append_element(trace_element: TraceElement, maxlen: int | None = ...) -> None:
    """Append a TraceElement to trace[path]."""
    ...

def trace_get(clear: bool = ...) -> dict[str, deque[TraceElement]] | None:
    """Return the current trace."""
    ...

def trace_clear() -> None:
    """Clear the trace."""
    ...

def trace_set_child_id(child_key: str, child_run_id: str) -> None:
    """Set child trace_id of TraceElement at the top of the stack."""
    ...

def trace_set_result(**kwargs: Any) -> None:
    """Set the result of TraceElement at the top of the stack."""
    ...

def trace_update_result(**kwargs: Any) -> None:
    """Update the result of TraceElement at the top of the stack."""
    ...

class StopReason:
    """Mutable container class for script_execution."""

    script_execution: str | None = ...

def script_execution_set(reason: str) -> None:
    """Set stop reason."""
    ...

def script_execution_get() -> str | None:
    """Return the current trace."""
    ...

@contextmanager
def trace_path(suffix: str | list[str]) -> Generator:
    """Go deeper in the config tree.

    Can not be used as a decorator on couroutine functions.
    """
    ...

def async_trace_path(suffix: str | list[str]) -> Callable:
    """Go deeper in the config tree.

    To be used as a decorator on coroutine functions.
    """
    ...
