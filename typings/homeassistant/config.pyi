"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Any

from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import Integration
from homeassistant.util.yaml import Secrets

"""Module to help with parsing and generating configuration files."""
_LOGGER = ...
DATA_PERSISTENT_ERRORS = ...
RE_YAML_ERROR = ...
RE_ASCII = ...
YAML_CONFIG_FILE = ...
VERSION_FILE = ...
CONFIG_DIR_NAME = ...
DATA_CUSTOMIZE = ...
GROUP_CONFIG_PATH = ...
AUTOMATION_CONFIG_PATH = ...
SCRIPT_CONFIG_PATH = ...
SCENE_CONFIG_PATH = ...
LOAD_EXCEPTIONS = ...
INTEGRATION_LOAD_EXCEPTIONS = ...
DEFAULT_CONFIG = ...
DEFAULT_SECRETS = ...
TTS_PRE_92 = ...
TTS_92 = ...
PACKAGES_CONFIG_SCHEMA = ...
CUSTOMIZE_DICT_SCHEMA = ...
CUSTOMIZE_CONFIG_SCHEMA = ...
CORE_CONFIG_SCHEMA = ...

def get_default_config_dir() -> str:
    """Put together the default configuration directory based on the OS."""
    ...

async def async_ensure_config_exists(hass: HomeAssistant) -> bool:
    """Ensure a configuration file exists in given configuration directory.

    Creating a default one if needed.
    Return boolean if configuration dir is ready to go.
    """
    ...

async def async_create_default_config(hass: HomeAssistant) -> bool:
    """Create a default configuration file in given configuration directory.

    Return if creation was successful.
    """
    ...

async def async_hass_config_yaml(hass: HomeAssistant) -> dict:
    """Load YAML from a Home Assistant configuration file.

    This function allow a component inside the asyncio loop to reload its
    configuration by itself. Include package merge.
    """
    ...

def load_yaml_config_file(
    config_path: str, secrets: Secrets | None = ...
) -> dict[Any, Any]:
    """Parse a YAML configuration file.

    Raises FileNotFoundError or HomeAssistantError.

    This method needs to run in an executor.
    """
    ...

def process_ha_config_upgrade(hass: HomeAssistant) -> None:
    """Upgrade configuration if necessary.

    This method needs to run in an executor.
    """
    ...

@callback
def async_log_exception(
    ex: Exception,
    domain: str,
    config: dict,
    hass: HomeAssistant,
    link: str | None = ...,
) -> None:
    """Log an error for configuration validation.

    This method must be run in the event loop.
    """
    ...

async def async_process_ha_core_config(hass: HomeAssistant, config: dict) -> None:
    """Process the [homeassistant] section from the configuration.

    This method is a coroutine.
    """
    ...

async def merge_packages_config(
    hass: HomeAssistant,
    config: dict,
    packages: dict[str, Any],
    _log_pkg_error: Callable = ...,
) -> dict:
    """Merge packages into the top-level configuration. Mutate config."""
    ...

async def async_process_component_config(
    hass: HomeAssistant, config: ConfigType, integration: Integration
) -> ConfigType | None:
    """Check component configuration and return processed configuration.

    Returns None on error.

    This method must be run in the event loop.
    """
    ...

@callback
def config_without_domain(config: ConfigType, domain: str) -> ConfigType:
    """Return a config with all configuration for a domain removed."""
    ...

async def async_check_ha_config_file(hass: HomeAssistant) -> str | None:
    """Check if Home Assistant configuration file is valid.

    This method is a coroutine.
    """
    ...

@callback
def async_notify_setup_error(
    hass: HomeAssistant, component: str, display_link: str | None = ...
) -> None:
    """Print a persistent notification.

    This method must be run in the event loop.
    """
    ...
