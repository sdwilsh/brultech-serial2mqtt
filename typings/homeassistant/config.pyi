"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from collections.abc import Callable
from dataclasses import dataclass
from enum import StrEnum
from typing import Any
from .core import HomeAssistant, callback
from .exceptions import HomeAssistantError
from .helpers.typing import ConfigType
from .loader import Integration
from .util.yaml import Secrets

"""Module to help with parsing and generating configuration files."""
_LOGGER = ...
RE_YAML_ERROR = ...
RE_ASCII = ...
YAML_CONFIG_FILE = ...
VERSION_FILE = ...
CONFIG_DIR_NAME = ...
DATA_CUSTOMIZE = ...
AUTOMATION_CONFIG_PATH = ...
SCRIPT_CONFIG_PATH = ...
SCENE_CONFIG_PATH = ...
LOAD_EXCEPTIONS = ...
INTEGRATION_LOAD_EXCEPTIONS = ...
SAFE_MODE_FILENAME = ...
DEFAULT_CONFIG = ...
DEFAULT_SECRETS = ...
TTS_PRE_92 = ...
TTS_92 = ...

class ConfigErrorTranslationKey(StrEnum):
    """Config error translation keys for config errors."""

    CONFIG_VALIDATION_ERR = ...
    PLATFORM_CONFIG_VALIDATION_ERR = ...
    COMPONENT_IMPORT_ERR = ...
    CONFIG_PLATFORM_IMPORT_ERR = ...
    CONFIG_VALIDATOR_UNKNOWN_ERR = ...
    CONFIG_SCHEMA_UNKNOWN_ERR = ...
    PLATFORM_VALIDATOR_UNKNOWN_ERR = ...
    PLATFORM_COMPONENT_LOAD_ERR = ...
    PLATFORM_COMPONENT_LOAD_EXC = ...
    PLATFORM_SCHEMA_VALIDATOR_ERR = ...
    INTEGRATION_CONFIG_ERROR = ...

@dataclass
class ConfigExceptionInfo:
    """Configuration exception info class."""

    exception: Exception
    translation_key: ConfigErrorTranslationKey
    platform_name: str
    config: ConfigType
    integration_link: str | None
    ...

@dataclass
class IntegrationConfigInfo:
    """Configuration for an integration and exception information."""

    config: ConfigType | None
    exception_info_list: list[ConfigExceptionInfo]
    ...

PACKAGES_CONFIG_SCHEMA = ...
CUSTOMIZE_DICT_SCHEMA = ...
CUSTOMIZE_CONFIG_SCHEMA = ...
CORE_CONFIG_SCHEMA = ...

def get_default_config_dir() -> str:
    """Put together the default configuration directory based on the OS."""
    ...

async def async_ensure_config_exists(hass: HomeAssistant) -> bool:
    """Ensure a configuration file exists in given configuration directory.

    Creating a default one if needed.
    Return boolean if configuration dir is ready to go.
    """
    ...

async def async_create_default_config(hass: HomeAssistant) -> bool:
    """Create a default configuration file in given configuration directory.

    Return if creation was successful.
    """
    ...

async def async_hass_config_yaml(hass: HomeAssistant) -> dict:
    """Load YAML from a Home Assistant configuration file.

    This function allows a component inside the asyncio loop to reload its
    configuration by itself. Include package merge.
    """
    ...

def load_yaml_config_file(
    config_path: str, secrets: Secrets | None = ...
) -> dict[Any, Any]:
    """Parse a YAML configuration file.

    Raises FileNotFoundError or HomeAssistantError.

    This method needs to run in an executor.
    """
    ...

def process_ha_config_upgrade(hass: HomeAssistant) -> None:
    """Upgrade configuration if necessary.

    This method needs to run in an executor.
    """
    ...

@callback
def async_log_schema_error(
    exc: vol.Invalid,
    domain: str,
    config: dict,
    hass: HomeAssistant,
    link: str | None = ...,
) -> None:
    """Log a schema validation error."""
    ...

@callback
def async_log_config_validator_error(
    exc: vol.Invalid | HomeAssistantError,
    domain: str,
    config: dict,
    hass: HomeAssistant,
    link: str | None = ...,
) -> None:
    """Log an error from a custom config validator."""
    ...

def find_annotation(
    config: dict | list, path: list[str | int]
) -> tuple[str, int | str] | None:
    """Find file/line annotation for a node in config pointed to by path.

    If the node pointed to is a dict or list, prefer the annotation for the key in
    the key/value pair defining the dict or list.
    If the node is not annotated, try the parent node.
    """
    ...

def stringify_invalid(
    hass: HomeAssistant,
    exc: vol.Invalid,
    domain: str,
    config: dict,
    link: str | None,
    max_sub_error_length: int,
) -> str:
    """Stringify voluptuous.Invalid.

    This is an alternative to the custom __str__ implemented in
    voluptuous.error.Invalid. The modifications are:
    - Format the path delimited by -> instead of @data[]
    - Prefix with domain, file and line of the error
    - Suffix with a link to the documentation
    - Give a more user friendly output for unknown options
    - Give a more user friendly output for missing options
    """
    ...

def humanize_error(
    hass: HomeAssistant,
    validation_error: vol.Invalid,
    domain: str,
    config: dict,
    link: str | None,
    max_sub_error_length: int = ...,
) -> str:
    """Provide a more helpful + complete validation error message.

    This is a modified version of voluptuous.error.Invalid.__str__,
    the modifications make some minor changes to the formatting.
    """
    ...

@callback
def format_homeassistant_error(
    hass: HomeAssistant,
    exc: HomeAssistantError,
    domain: str,
    config: dict,
    link: str | None = ...,
) -> str:
    """Format HomeAssistantError thrown by a custom config validator."""
    ...

@callback
def format_schema_error(
    hass: HomeAssistant,
    exc: vol.Invalid,
    domain: str,
    config: dict,
    link: str | None = ...,
) -> str:
    """Format configuration validation error."""
    ...

async def async_process_ha_core_config(hass: HomeAssistant, config: dict) -> None:
    """Process the [homeassistant] section from the configuration.

    This method is a coroutine.
    """
    ...

async def merge_packages_config(
    hass: HomeAssistant,
    config: dict,
    packages: dict[str, Any],
    _log_pkg_error: Callable[[HomeAssistant, str, str, dict, str], None] = ...,
) -> dict:
    """Merge packages into the top-level configuration. Mutate config."""
    ...

async def async_process_component_and_handle_errors(
    hass: HomeAssistant,
    config: ConfigType,
    integration: Integration,
    raise_on_failure: bool = ...,
) -> ConfigType | None:
    """Process and component configuration and handle errors.

    In case of errors:
    - Print the error messages to the log.
    - Raise a ConfigValidationError if raise_on_failure is set.

    Returns the integration config or `None`.
    """
    ...

@callback
def async_handle_component_errors(
    hass: HomeAssistant,
    integration_config_info: IntegrationConfigInfo,
    integration: Integration,
    raise_on_failure: bool = ...,
) -> ConfigType | None:
    """Handle component configuration errors from async_process_component_config.

    In case of errors:
    - Print the error messages to the log.
    - Raise a ConfigValidationError if raise_on_failure is set.

    Returns the integration config or `None`.
    """
    ...

async def async_process_component_config(
    hass: HomeAssistant, config: ConfigType, integration: Integration
) -> IntegrationConfigInfo:
    """Check component configuration.

    Returns processed configuration and exception information.

    This method must be run in the event loop.
    """
    ...

@callback
def config_without_domain(config: ConfigType, domain: str) -> ConfigType:
    """Return a config with all configuration for a domain removed."""
    ...

async def async_check_ha_config_file(hass: HomeAssistant) -> str | None:
    """Check if Home Assistant configuration file is valid.

    This method is a coroutine.
    """
    ...

def safe_mode_enabled(config_dir: str) -> bool:
    """Return if safe mode is enabled.

    If safe mode is enabled, the safe mode file will be removed.
    """
    ...

async def async_enable_safe_mode(hass: HomeAssistant) -> None:
    """Enable safe mode."""
    ...
