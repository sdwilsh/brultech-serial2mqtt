"""
This type stub file was generated by pyright.
"""

import paho.mqtt.client as mqtt
from collections.abc import Callable, Coroutine
from dataclasses import dataclass
from typing import Any, TYPE_CHECKING
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import CALLBACK_TYPE, HassJob, HomeAssistant, callback
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass
from .models import (
    AsyncMessageCallbackType,
    MessageCallbackType,
    MqttData,
    PublishPayloadType,
    ReceiveMessage,
)

"""Support for MQTT message handling."""
if TYPE_CHECKING: ...
_LOGGER = ...
DISCOVERY_COOLDOWN = ...
INITIAL_SUBSCRIBE_COOLDOWN = ...
SUBSCRIBE_COOLDOWN = ...
UNSUBSCRIBE_COOLDOWN = ...
TIMEOUT_ACK = ...
MQTT_ENTRIES_NAMING_BLOG_URL = ...
SubscribePayloadType = str | bytes

def publish(
    hass: HomeAssistant,
    topic: str,
    payload: PublishPayloadType,
    qos: int | None = ...,
    retain: bool | None = ...,
    encoding: str | None = ...,
) -> None:
    """Publish message to a MQTT topic."""
    ...

async def async_publish(
    hass: HomeAssistant,
    topic: str,
    payload: PublishPayloadType,
    qos: int | None = ...,
    retain: bool | None = ...,
    encoding: str | None = ...,
) -> None:
    """Publish message to a MQTT topic."""
    ...

@bind_hass
async def async_subscribe(
    hass: HomeAssistant,
    topic: str,
    msg_callback: AsyncMessageCallbackType | MessageCallbackType,
    qos: int = ...,
    encoding: str | None = ...,
) -> CALLBACK_TYPE:
    """Subscribe to an MQTT topic.

    Call the return value to unsubscribe.
    """
    ...

@bind_hass
def subscribe(
    hass: HomeAssistant,
    topic: str,
    msg_callback: MessageCallbackType,
    qos: int = ...,
    encoding: str = ...,
) -> Callable[[], None]:
    """Subscribe to an MQTT topic."""
    ...
@dataclass(frozen=True)
class Subscription:
    """Class to hold data about an active subscription."""

    topic: str
    matcher: Any
    job: HassJob[[ReceiveMessage], Coroutine[Any, Any, None] | None]
    qos: int = ...
    encoding: str | None = ...

class MqttClientSetup:
    """Helper class to setup the paho mqtt client from config."""
    def __init__(self, config: ConfigType) -> None:
        """Initialize the MQTT client setup helper."""
        ...

    @property
    def client(self) -> mqtt.Client:
        """Return the paho MQTT client."""
        ...

class EnsureJobAfterCooldown:
    """Ensure a cool down period before executing a job.

    When a new execute request arrives we cancel the current request
    and start a new one.
    """
    def __init__(
        self, timeout: float, callback_job: Callable[[], Coroutine[Any, None, None]]
    ) -> None:
        """Initialize the timer."""
        ...

    def set_timeout(self, timeout: float) -> None:
        """Set a new timeout period."""
        ...

    @callback
    def async_schedule(self) -> None:
        """Ensure we execute after a cooldown period."""
        ...

    async def async_cleanup(self) -> None:
        """Cleanup any pending task."""
        ...

class MQTT:
    """Home Assistant MQTT client."""

    _mqttc: mqtt.Client
    _last_subscribe: float
    _mqtt_data: MqttData
    def __init__(
        self, hass: HomeAssistant, config_entry: ConfigEntry, conf: ConfigType
    ) -> None:
        """Initialize Home Assistant MQTT client."""
        ...

    def register_naming_issues(self) -> None:
        """Register issues with MQTT entity naming."""
        ...

    def start(self, mqtt_data: MqttData) -> None:
        """Start Home Assistant MQTT client."""
        ...

    @property
    def subscriptions(self) -> list[Subscription]:
        """Return the tracked subscriptions."""
        ...

    def cleanup(self) -> None:
        """Clean up listeners."""
        ...

    def init_client(self) -> None:
        """Initialize paho client."""
        ...

    async def async_publish(
        self, topic: str, payload: PublishPayloadType, qos: int, retain: bool
    ) -> None:
        """Publish a MQTT message."""
        ...

    async def async_connect(self) -> None:
        """Connect to the host. Does not process messages yet."""
        ...

    async def async_disconnect(self) -> None:
        """Stop the MQTT client."""
        ...

    @callback
    def async_restore_tracked_subscriptions(
        self, subscriptions: list[Subscription]
    ) -> None:
        """Restore tracked subscriptions after reload."""
        ...

    async def async_subscribe(
        self,
        topic: str,
        msg_callback: AsyncMessageCallbackType | MessageCallbackType,
        qos: int,
        encoding: str | None = ...,
    ) -> Callable[[], None]:
        """Set up a subscription to a topic with the provided qos.

        This method is a coroutine.
        """
        ...
