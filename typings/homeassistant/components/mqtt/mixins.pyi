"""
This type stub file was generated by pyright.
"""

import voluptuous as vol
from abc import ABC, abstractmethod
from collections.abc import Callable, Coroutine
from functools import partial
from typing import Any, Protocol, final
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers import entity_registry as er
from homeassistant.helpers.device_registry import (
    DeviceInfo,
    EventDeviceRegistryUpdatedData,
)
from homeassistant.helpers.entity import Entity
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.typing import ConfigType, DiscoveryInfoType, EventType
from .discovery import MQTTDiscoveryPayload
from .models import MessageCallbackType, PublishPayloadType

"""MQTT component mixins and helpers."""
_LOGGER = ...
AVAILABILITY_ALL = ...
AVAILABILITY_ANY = ...
AVAILABILITY_LATEST = ...
AVAILABILITY_MODES = ...
CONF_AVAILABILITY_MODE = ...
CONF_AVAILABILITY_TEMPLATE = ...
CONF_AVAILABILITY_TOPIC = ...
CONF_ENABLED_BY_DEFAULT = ...
CONF_PAYLOAD_AVAILABLE = ...
CONF_PAYLOAD_NOT_AVAILABLE = ...
CONF_JSON_ATTRS_TOPIC = ...
CONF_JSON_ATTRS_TEMPLATE = ...
MQTT_ATTRIBUTES_BLOCKED = ...
MQTT_AVAILABILITY_SINGLE_SCHEMA = ...
MQTT_AVAILABILITY_LIST_SCHEMA = ...
MQTT_AVAILABILITY_SCHEMA = ...

def validate_device_has_at_least_one_identifier(value: ConfigType) -> ConfigType:
    """Validate that a device info entry has at least one identifying value."""
    ...

def validate_sensor_entity_category(
    domain: str, discovery: bool
) -> Callable[[ConfigType], ConfigType]:
    """Check the sensor's entity category is not set to `config` which is invalid for sensors."""
    ...

MQTT_ENTITY_DEVICE_INFO_SCHEMA = ...
MQTT_ENTITY_COMMON_SCHEMA = ...

class SetupEntity(Protocol):
    """Protocol type for async_setup_entities."""
    async def __call__(
        self,
        hass: HomeAssistant,
        async_add_entities: AddEntitiesCallback,
        config: ConfigType,
        config_entry: ConfigEntry,
        discovery_data: DiscoveryInfoType | None = ...,
    ) -> None:
        """Define setup_entities type."""
        ...

@callback
def async_handle_schema_error(
    discovery_payload: MQTTDiscoveryPayload, err: vol.MultipleInvalid
) -> None:
    """Help handling schema errors on MQTT discovery messages."""
    ...

async def async_setup_non_entity_entry_helper(
    hass: HomeAssistant,
    domain: str,
    async_setup: partial[Coroutine[Any, Any, None]],
    discovery_schema: vol.Schema,
) -> None:
    """Set up automation or tag creation dynamically through MQTT discovery."""
    ...

async def async_setup_entity_entry_helper(
    hass: HomeAssistant,
    entry: ConfigEntry,
    entity_class: type[MqttEntity] | None,
    domain: str,
    async_add_entities: AddEntitiesCallback,
    discovery_schema: vol.Schema,
    platform_schema_modern: vol.Schema,
    schema_class_mapping: dict[str, type[MqttEntity]] | None = ...,
) -> None:
    """Set up entity creation dynamically through MQTT discovery."""
    ...

def init_entity_id_from_config(
    hass: HomeAssistant, entity: Entity, config: ConfigType, entity_id_format: str
) -> None:
    """Set entity_id from object_id if defined in config."""
    ...

def write_state_on_attr_change(
    entity: Entity, attributes: set[str]
) -> Callable[[MessageCallbackType], MessageCallbackType]:
    """Wrap an MQTT message callback to track state attribute changes."""
    ...

class MqttAttributes(Entity):
    """Mixin used for platforms that support JSON attributes."""

    _attributes_extra_blocked: frozenset[str] = ...
    def __init__(self, config: ConfigType) -> None:
        """Initialize the JSON attributes mixin."""
        ...

    async def async_added_to_hass(self) -> None:
        """Subscribe MQTT events."""
        ...

    def attributes_prepare_discovery_update(self, config: DiscoveryInfoType) -> None:
        """Handle updated discovery message."""
        ...

    async def attributes_discovery_update(self, config: DiscoveryInfoType) -> None:
        """Handle updated discovery message."""
        ...

    async def async_will_remove_from_hass(self) -> None:
        """Unsubscribe when removed."""
        ...

class MqttAvailability(Entity):
    """Mixin used for platforms that report availability."""
    def __init__(self, config: ConfigType) -> None:
        """Initialize the availability mixin."""
        ...

    async def async_added_to_hass(self) -> None:
        """Subscribe MQTT events."""
        ...

    def availability_prepare_discovery_update(self, config: DiscoveryInfoType) -> None:
        """Handle updated discovery message."""
        ...

    async def availability_discovery_update(self, config: DiscoveryInfoType) -> None:
        """Handle updated discovery message."""
        ...

    @callback
    def async_mqtt_connect(self) -> None:
        """Update state on connection/disconnection to MQTT broker."""
        ...

    async def async_will_remove_from_hass(self) -> None:
        """Unsubscribe when removed."""
        ...

    @property
    def available(self) -> bool:
        """Return if the device is available."""
        ...

async def cleanup_device_registry(
    hass: HomeAssistant, device_id: str | None, config_entry_id: str | None
) -> None:
    """Clean up the device registry after MQTT removal.

    Remove MQTT from the device registry entry if there are no remaining
    entities, triggers or tags.
    """
    ...

def get_discovery_hash(discovery_data: DiscoveryInfoType) -> tuple[str, str]:
    """Get the discovery hash from the discovery data."""
    ...

def send_discovery_done(hass: HomeAssistant, discovery_data: DiscoveryInfoType) -> None:
    """Acknowledge a discovery message has been handled."""
    ...

def stop_discovery_updates(
    hass: HomeAssistant,
    discovery_data: DiscoveryInfoType,
    remove_discovery_updated: Callable[[], None] | None = ...,
) -> None:
    """Stop discovery updates of being sent."""
    ...

async def async_remove_discovery_payload(
    hass: HomeAssistant, discovery_data: DiscoveryInfoType
) -> None:
    """Clear retained discovery payload.

    Remove discovery topic in broker to avoid rediscovery
    after a restart of Home Assistant.
    """
    ...

async def async_clear_discovery_topic_if_entity_removed(
    hass: HomeAssistant,
    discovery_data: DiscoveryInfoType,
    event: EventType[er.EventEntityRegistryUpdatedData],
) -> None:
    """Clear the discovery topic if the entity is removed."""
    ...

class MqttDiscoveryDeviceUpdate(ABC):
    """Add support for auto discovery for platforms without an entity."""
    def __init__(
        self,
        hass: HomeAssistant,
        discovery_data: DiscoveryInfoType,
        device_id: str | None,
        config_entry: ConfigEntry,
        log_name: str,
    ) -> None:
        """Initialize the update service."""
        ...

    async def async_discovery_update(
        self, discovery_payload: MQTTDiscoveryPayload
    ) -> None:
        """Handle discovery update."""
        ...

    @abstractmethod
    async def async_update(self, discovery_data: MQTTDiscoveryPayload) -> None:
        """Handle the update of platform specific parts, extend to the platform."""
        ...

    @abstractmethod
    async def async_tear_down(self) -> None:
        """Handle the cleanup of platform specific parts, extend to the platform."""
        ...

class MqttDiscoveryUpdate(Entity):
    """Mixin used to handle updated discovery message for entity based platforms."""
    def __init__(
        self,
        hass: HomeAssistant,
        discovery_data: DiscoveryInfoType | None,
        discovery_update: Callable[[MQTTDiscoveryPayload], Coroutine[Any, Any, None]]
        | None = ...,
    ) -> None:
        """Initialize the discovery update mixin."""
        ...

    async def async_added_to_hass(self) -> None:
        """Subscribe to discovery updates."""
        ...

    async def async_removed_from_registry(self) -> None:
        """Clear retained discovery topic in broker."""
        ...

    @callback
    def add_to_platform_abort(self) -> None:
        """Abort adding an entity to a platform."""
        ...

    async def async_will_remove_from_hass(self) -> None:
        """Stop listening to signal and cleanup discovery data.."""
        ...

def device_info_from_specifications(
    specifications: dict[str, Any] | None
) -> DeviceInfo | None:
    """Return a device description for device registry."""
    ...

class MqttEntityDeviceInfo(Entity):
    """Mixin used for mqtt platforms that support the device registry."""
    def __init__(
        self, specifications: dict[str, Any] | None, config_entry: ConfigEntry
    ) -> None:
        """Initialize the device mixin."""
        ...

    def device_info_discovery_update(self, config: DiscoveryInfoType) -> None:
        """Handle updated discovery message."""
        ...

    @property
    def device_info(self) -> DeviceInfo | None:
        """Return a device description for device registry."""
        ...

class MqttEntity(
    MqttAttributes, MqttAvailability, MqttDiscoveryUpdate, MqttEntityDeviceInfo
):
    """Representation of an MQTT entity."""

    _attr_has_entity_name = ...
    _attr_should_poll = ...
    _default_name: str | None
    _entity_id_format: str
    _issue_key: str | None
    def __init__(
        self,
        hass: HomeAssistant,
        config: ConfigType,
        config_entry: ConfigEntry,
        discovery_data: DiscoveryInfoType | None,
    ) -> None:
        """Init the MQTT Entity."""
        ...

    @final
    async def async_added_to_hass(self) -> None:
        """Subscribe to MQTT events."""
        ...

    async def mqtt_async_added_to_hass(self) -> None:
        """Call before the discovery message is acknowledged.

        To be extended by subclasses.
        """
        ...

    async def discovery_update(self, discovery_payload: MQTTDiscoveryPayload) -> None:
        """Handle updated discovery message."""
        ...

    async def async_will_remove_from_hass(self) -> None:
        """Unsubscribe when removed."""
        ...

    async def async_publish(
        self,
        topic: str,
        payload: PublishPayloadType,
        qos: int = ...,
        retain: bool = ...,
        encoding: str | None = ...,
    ) -> None:
        """Publish message to an MQTT topic."""
        ...

    @staticmethod
    @abstractmethod
    def config_schema() -> vol.Schema:
        """Return the config schema."""
        ...

    def collect_issues(self) -> None:
        """Process issues for MQTT entities."""
        ...

def update_device(
    hass: HomeAssistant, config_entry: ConfigEntry, config: ConfigType
) -> str | None:
    """Update device registry."""
    ...

@callback
def async_removed_from_device(
    hass: HomeAssistant,
    event: EventType[EventDeviceRegistryUpdatedData],
    mqtt_device_id: str,
    config_entry_id: str,
) -> bool:
    """Check if the passed event indicates MQTT was removed from a device."""
    ...
