"""
This type stub file was generated by pyright.
"""

from typing import Any
from homeassistant.core import HomeAssistant
from homeassistant.helpers import template
from homeassistant.helpers.typing import ConfigType
from .models import MqttData

"""Utility functions for the MQTT integration."""
AVAILABILITY_TIMEOUT = ...
TEMP_DIR_NAME = ...
_VALID_QOS_SCHEMA = ...

def mqtt_config_entry_enabled(hass: HomeAssistant) -> bool | None:
    """Return true when the MQTT config entry is enabled."""
    ...

async def async_wait_for_mqtt_client(hass: HomeAssistant) -> bool:
    """Wait for the MQTT client to become available.

    Waits when mqtt set up is in progress,
    It is not needed that the client is connected.
    Returns True if the mqtt client is available.
    Returns False when the client is not available.
    """
    ...

def valid_topic(topic: Any) -> str:
    """Validate that this is a valid topic name/filter."""
    ...

def valid_subscribe_topic(topic: Any) -> str:
    """Validate that we can subscribe using this MQTT topic."""
    ...

def valid_subscribe_topic_template(value: Any) -> template.Template:
    """Validate either a jinja2 template or a valid MQTT subscription topic."""
    ...

def valid_publish_topic(topic: Any) -> str:
    """Validate that we can publish using this MQTT topic."""
    ...

def valid_qos_schema(qos: Any) -> int:
    """Validate that QOS value is valid."""
    ...

_MQTT_WILL_BIRTH_SCHEMA = ...

def valid_birth_will(config: ConfigType) -> ConfigType:
    """Validate a birth or will configuration and required topic/payload."""
    ...

def get_mqtt_data(hass: HomeAssistant) -> MqttData:
    """Return typed MqttData from hass.data[DATA_MQTT]."""
    ...

async def async_create_certificate_temp_files(
    hass: HomeAssistant, config: ConfigType
) -> None:
    """Create certificate temporary files for the MQTT client."""
    ...

def get_file_path(option: str, default: str | None = ...) -> str | None:
    """Get file path of a certificate file."""
    ...

def migrate_certificate_file_to_content(file_name_or_auto: str) -> str | None:
    """Convert certificate file or setting to config entry setting."""
    ...
