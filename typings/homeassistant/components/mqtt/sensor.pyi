"""
This type stub file was generated by pyright.
"""

from homeassistant.components.sensor import SensorEntity
from homeassistant.core import HomeAssistant
from homeassistant.helpers.typing import ConfigType

from .mixins import MqttEntity

"""Support for MQTT sensors."""
_LOGGER = ...
CONF_EXPIRE_AFTER = ...
CONF_LAST_RESET_TOPIC = ...
CONF_LAST_RESET_VALUE_TEMPLATE = ...
MQTT_SENSOR_ATTRIBUTES_BLOCKED = ...
DEFAULT_NAME = ...
DEFAULT_FORCE_UPDATE = ...

def validate_options(conf):
    """Validate options.

    If last reset topic is present it must be same as the state topic.
    """
    ...

_PLATFORM_SCHEMA_BASE = ...
PLATFORM_SCHEMA = ...
DISCOVERY_SCHEMA = ...

async def async_setup_platform(
    hass: HomeAssistant, config: ConfigType, async_add_entities, discovery_info=...
):  # -> None:
    """Set up MQTT sensors through configuration.yaml."""
    ...

async def async_setup_entry(hass, config_entry, async_add_entities):  # -> None:
    """Set up MQTT sensors dynamically through MQTT discovery."""
    ...

class MqttSensor(MqttEntity, SensorEntity):
    """Representation of a sensor that can be updated using MQTT."""

    _attr_last_reset = ...
    _attributes_extra_blocked = ...
    def __init__(self, hass, config, config_entry, discovery_data) -> None:
        """Initialize the sensor."""
        ...
    @staticmethod
    def config_schema():  # -> All:
        """Return the config schema."""
        ...
    @property
    def native_unit_of_measurement(self):
        """Return the unit this state is expressed in."""
        ...
    @property
    def force_update(self):
        """Force update."""
        ...
    @property
    def native_value(self):  # -> None:
        """Return the state of the entity."""
        ...
    @property
    def device_class(self) -> str | None:
        """Return the device class of the sensor."""
        ...
    @property
    def state_class(self) -> str | None:
        """Return the state class of the sensor."""
        ...
    @property
    def available(self) -> bool:
        """Return true if the device is available and value has not expired."""
        ...
