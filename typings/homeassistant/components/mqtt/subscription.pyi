"""
This type stub file was generated by pyright.
"""

import attr
from collections.abc import Callable, Coroutine
from typing import Any
from homeassistant.core import HomeAssistant
from .models import MessageCallbackType

"""Helper to handle a set of topics to subscribe to."""

@attr.s(slots=True)
class EntitySubscription:
    """Class to hold data about an active entity topic subscription."""

    hass: HomeAssistant = ...
    topic: str | None = ...
    message_callback: MessageCallbackType = ...
    subscribe_task: Coroutine[Any, Any, Callable[[], None]] | None = ...
    unsubscribe_callback: Callable[[], None] | None = ...
    qos: int = ...
    encoding: str = ...
    def resubscribe_if_necessary(
        self, hass: HomeAssistant, other: EntitySubscription | None
    ) -> None:
        """Re-subscribe to the new topic if necessary."""
        ...

    async def subscribe(self) -> None:
        """Subscribe to a topic."""
        ...

def async_prepare_subscribe_topics(
    hass: HomeAssistant,
    new_state: dict[str, EntitySubscription] | None,
    topics: dict[str, Any],
) -> dict[str, EntitySubscription]:
    """Prepare (re)subscribe to a set of MQTT topics.

    State is kept in sub_state and a dictionary mapping from the subscription
    key to the subscription state.

    After this function has been called, async_subscribe_topics must be called to
    finalize any new subscriptions.

    Please note that the sub state must not be shared between multiple
    sets of topics. Every call to async_subscribe_topics must always
    contain _all_ the topics the subscription state should manage.
    """
    ...

async def async_subscribe_topics(
    hass: HomeAssistant, sub_state: dict[str, EntitySubscription]
) -> None:
    """(Re)Subscribe to a set of MQTT topics."""
    ...

def async_unsubscribe_topics(
    hass: HomeAssistant, sub_state: dict[str, EntitySubscription] | None
) -> dict[str, EntitySubscription]:
    """Unsubscribe from all MQTT topics managed by async_subscribe_topics."""
    ...
