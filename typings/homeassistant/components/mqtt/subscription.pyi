"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from typing import Any

import attr
from homeassistant.core import HomeAssistant
from homeassistant.loader import bind_hass

from .models import MessageCallbackType

"""Helper to handle a set of topics to subscribe to."""

@attr.s(slots=True)
class EntitySubscription:
    """Class to hold data about an active entity topic subscription."""

    hass: HomeAssistant = ...
    topic: str = ...
    message_callback: MessageCallbackType = ...
    unsubscribe_callback: Callable[[], None] | None = ...
    qos: int = ...
    encoding: str = ...
    async def resubscribe_if_necessary(self, hass, other):  # -> None:
        """Re-subscribe to the new topic if necessary."""
        ...

@bind_hass
async def async_subscribe_topics(
    hass: HomeAssistant,
    new_state: dict[str, EntitySubscription] | None,
    topics: dict[str, Any],
) -> dict[str, EntitySubscription]:
    """(Re)Subscribe to a set of MQTT topics.

    State is kept in sub_state and a dictionary mapping from the subscription
    key to the subscription state.

    Please note that the sub state must not be shared between multiple
    sets of topics. Every call to async_subscribe_topics must always
    contain _all_ the topics the subscription state should manage.
    """
    ...

@bind_hass
async def async_unsubscribe_topics(
    hass: HomeAssistant, sub_state: dict[str, EntitySubscription] | None
) -> dict[str, EntitySubscription]:
    """Unsubscribe from all MQTT topics managed by async_subscribe_topics."""
    ...
