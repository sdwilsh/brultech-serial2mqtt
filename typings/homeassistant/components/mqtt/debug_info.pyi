"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable

from homeassistant.core import HomeAssistant

from .models import MessageCallbackType

"""Helper to handle a set of topics to subscribe to."""
DATA_MQTT_DEBUG_INFO = ...
STORED_MESSAGES = ...

def log_messages(
    hass: HomeAssistant, entity_id: str
) -> Callable[[MessageCallbackType], MessageCallbackType]:
    """Wrap an MQTT message callback to support message logging."""
    ...

def add_subscription(hass, message_callback, subscription):  # -> None:
    """Prepare debug data for subscription."""
    ...

def remove_subscription(hass, message_callback, subscription):  # -> None:
    """Remove debug data for subscription if it exists."""
    ...

def add_entity_discovery_data(hass, discovery_data, entity_id):  # -> None:
    """Add discovery data."""
    ...

def update_entity_discovery_data(hass, discovery_payload, entity_id):  # -> None:
    """Update discovery data."""
    ...

def remove_entity_data(hass, entity_id):  # -> None:
    """Remove discovery data."""
    ...

def add_trigger_discovery_data(
    hass, discovery_hash, discovery_data, device_id
):  # -> None:
    """Add discovery data."""
    ...

def update_trigger_discovery_data(hass, discovery_hash, discovery_payload):  # -> None:
    """Update discovery data."""
    ...

def remove_trigger_discovery_data(hass, discovery_hash):  # -> None:
    """Remove discovery data."""
    ...

async def info_for_device(hass, device_id):  # -> dict[str, list[Unknown]]:
    """Get debug info for a device."""
    ...
