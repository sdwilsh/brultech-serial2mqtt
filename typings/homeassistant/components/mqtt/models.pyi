"""
This type stub file was generated by pyright.
"""

import asyncio
import datetime as dt
import voluptuous as vol
from collections import deque
from collections.abc import Callable, Coroutine
from dataclasses import dataclass
from enum import StrEnum
from typing import Any, TYPE_CHECKING, TypedDict
from homeassistant.core import CALLBACK_TYPE, HomeAssistant, callback
from homeassistant.helpers import template
from homeassistant.helpers.entity import Entity
from homeassistant.helpers.service_info.mqtt import ReceivePayloadType
from homeassistant.helpers.typing import ConfigType, DiscoveryInfoType, TemplateVarsType
from paho.mqtt.client import MQTTMessage
from .client import MQTT, Subscription
from .debug_info import TimestampedPublishMessage
from .device_trigger import Trigger
from .discovery import MQTTDiscoveryPayload
from .tag import MQTTTagScanner

"""Models used by multiple MQTT modules."""
if TYPE_CHECKING: ...

class PayloadSentinel(StrEnum):
    """Sentinel for `async_render_with_possible_json_value`."""

    NONE = ...
    DEFAULT = ...

_LOGGER = ...
ATTR_THIS = ...
PublishPayloadType = str | bytes | int | float | None

@dataclass
class PublishMessage:
    """MQTT Message for publishing."""

    topic: str
    payload: PublishPayloadType
    qos: int
    retain: bool
    ...

@dataclass
class ReceiveMessage:
    """MQTT Message received."""

    topic: str
    payload: ReceivePayloadType
    qos: int
    retain: bool
    subscribed_topic: str
    timestamp: dt.datetime
    ...

AsyncMessageCallbackType = Callable[[ReceiveMessage], Coroutine[Any, Any, None]]
MessageCallbackType = Callable[[ReceiveMessage], None]

class SubscriptionDebugInfo(TypedDict):
    """Class for holding subscription debug info."""

    messages: deque[ReceiveMessage]
    count: int
    ...

class EntityDebugInfo(TypedDict):
    """Class for holding entity based debug info."""

    subscriptions: dict[str, SubscriptionDebugInfo]
    discovery_data: DiscoveryInfoType
    transmitted: dict[str, dict[str, deque[TimestampedPublishMessage]]]
    ...

class TriggerDebugInfo(TypedDict):
    """Class for holding trigger based debug info."""

    device_id: str
    discovery_data: DiscoveryInfoType
    ...

class PendingDiscovered(TypedDict):
    """Pending discovered items."""

    pending: deque[MQTTDiscoveryPayload]
    unsub: CALLBACK_TYPE
    ...

class MqttOriginInfo(TypedDict, total=False):
    """Integration info of discovered entity."""

    name: str
    manufacturer: str
    sw_version: str
    hw_version: str
    support_url: str
    ...

class MqttCommandTemplate:
    """Class for rendering MQTT payload with command templates."""
    def __init__(
        self,
        command_template: template.Template | None,
        *,
        hass: HomeAssistant | None = ...,
        entity: Entity | None = ...,
    ) -> None:
        """Instantiate a command template."""
        ...

    @callback
    def async_render(
        self, value: PublishPayloadType = ..., variables: TemplateVarsType = ...
    ) -> PublishPayloadType:
        """Render or convert the command template with given value or variables."""
        ...

class MqttValueTemplate:
    """Class for rendering MQTT value template with possible json values."""
    def __init__(
        self,
        value_template: template.Template | None,
        *,
        hass: HomeAssistant | None = ...,
        entity: Entity | None = ...,
        config_attributes: TemplateVarsType = ...,
    ) -> None:
        """Instantiate a value template."""
        ...

    @callback
    def async_render_with_possible_json_value(
        self,
        payload: ReceivePayloadType,
        default: ReceivePayloadType | PayloadSentinel = ...,
        variables: TemplateVarsType = ...,
    ) -> ReceivePayloadType:
        """Render with possible json value or pass-though a received MQTT value."""
        ...

class EntityTopicState:
    """Manage entity state write requests for subscribed topics."""
    def __init__(self) -> None:
        """Register topic."""
        ...

    @callback
    def process_write_state_requests(self, msg: MQTTMessage) -> None:
        """Process the write state requests."""
        ...

    @callback
    def write_state_request(self, entity: Entity) -> None:
        """Register write state request."""
        ...

@dataclass
class MqttData:
    """Keep the MQTT entry data."""

    client: MQTT
    config: list[ConfigType]
    debug_info_entities: dict[str, EntityDebugInfo] = ...
    debug_info_triggers: dict[tuple[str, str], TriggerDebugInfo] = ...
    device_triggers: dict[str, Trigger] = ...
    data_config_flow_lock: asyncio.Lock = ...
    discovery_already_discovered: set[tuple[str, str]] = ...
    discovery_pending_discovered: dict[tuple[str, str], PendingDiscovered] = ...
    discovery_registry_hooks: dict[tuple[str, str], CALLBACK_TYPE] = ...
    discovery_unsubscribe: list[CALLBACK_TYPE] = ...
    integration_unsubscribe: dict[str, CALLBACK_TYPE] = ...
    issues: dict[str, set[str]] = ...
    last_discovery: float = ...
    reload_dispatchers: list[CALLBACK_TYPE] = ...
    reload_handlers: dict[str, CALLBACK_TYPE] = ...
    reload_schema: dict[str, vol.Schema] = ...
    state_write_requests: EntityTopicState = ...
    subscriptions_to_restore: list[Subscription] = ...
    tags: dict[str, dict[str, MQTTTagScanner]] = ...
