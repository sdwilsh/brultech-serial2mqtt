"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import asyncio
import inspect
import logging
import ssl
import time
import uuid
from functools import lru_cache, partial, wraps
from itertools import groupby
from operator import attrgetter
from typing import Any, Awaitable, Callable, Union, cast

import attr
import certifi
import voluptuous as vol
from homeassistant import config_entries
from homeassistant.components import websocket_api
from homeassistant.const import (
    CONF_CLIENT_ID,
    CONF_DISCOVERY,
    CONF_PASSWORD,
    CONF_PAYLOAD,
    CONF_PORT,
    CONF_PROTOCOL,
    CONF_USERNAME,
    CONF_VALUE_TEMPLATE,
    EVENT_HOMEASSISTANT_STARTED,
    EVENT_HOMEASSISTANT_STOP,
)
from homeassistant.core import (
    CoreState,
    Event,
    HassJob,
    HomeAssistant,
    ServiceCall,
    callback,
)
from homeassistant.exceptions import HomeAssistantError, TemplateError, Unauthorized
from homeassistant.helpers import config_validation as cv
from homeassistant.helpers import event, template
from homeassistant.helpers.dispatcher import async_dispatcher_connect, dispatcher_send
from homeassistant.helpers.typing import ConfigType, ServiceDataType
from homeassistant.loader import bind_hass
from homeassistant.util import dt as dt_util
from homeassistant.util.async_ import run_callback_threadsafe
from homeassistant.util.logging import catch_log_exception

from . import debug_info, discovery
from .const import (
    ATTR_PAYLOAD,
    ATTR_QOS,
    ATTR_RETAIN,
    ATTR_TOPIC,
    CONF_BIRTH_MESSAGE,
    CONF_BROKER,
    CONF_COMMAND_TOPIC,
    CONF_QOS,
    CONF_RETAIN,
    CONF_STATE_TOPIC,
    CONF_WILL_MESSAGE,
    DATA_MQTT_CONFIG,
    DEFAULT_BIRTH,
    DEFAULT_DISCOVERY,
    DEFAULT_PREFIX,
    DEFAULT_QOS,
    DEFAULT_RETAIN,
    DEFAULT_WILL,
    DOMAIN,
    MQTT_CONNECTED,
    MQTT_DISCONNECTED,
    PROTOCOL_311,
)
from .discovery import LAST_DISCOVERY
from .models import (
    AsyncMessageCallbackType,
    MessageCallbackType,
    PublishMessage,
    PublishPayloadType,
    ReceiveMessage,
    ReceivePayloadType,
)
from .util import _VALID_QOS_SCHEMA, valid_publish_topic, valid_subscribe_topic

"""Support for MQTT message handling."""
_LOGGER = ...
DATA_MQTT = ...
SERVICE_PUBLISH = ...
SERVICE_DUMP = ...
CONF_DISCOVERY_PREFIX = ...
CONF_KEEPALIVE = ...
CONF_CERTIFICATE = ...
CONF_CLIENT_KEY = ...
CONF_CLIENT_CERT = ...
CONF_TLS_INSECURE = ...
CONF_TLS_VERSION = ...
PROTOCOL_31 = ...
DEFAULT_PORT = ...
DEFAULT_KEEPALIVE = ...
DEFAULT_PROTOCOL = ...
DEFAULT_TLS_PROTOCOL = ...
ATTR_PAYLOAD_TEMPLATE = ...
MAX_RECONNECT_WAIT = ...
CONNECTION_SUCCESS = ...
CONNECTION_FAILED = ...
CONNECTION_FAILED_RECOVERABLE = ...
DISCOVERY_COOLDOWN = ...
TIMEOUT_ACK = ...
PLATFORMS = ...
CLIENT_KEY_AUTH_MSG = ...
MQTT_WILL_BIRTH_SCHEMA = ...
CONFIG_SCHEMA = ...
SCHEMA_BASE = ...
MQTT_BASE_PLATFORM_SCHEMA = ...
MQTT_RO_PLATFORM_SCHEMA = ...
MQTT_RW_PLATFORM_SCHEMA = ...
MQTT_PUBLISH_SCHEMA = ...
SubscribePayloadType = Union[str, bytes]

@bind_hass
def publish(hass: HomeAssistant, topic, payload, qos=..., retain=...) -> None:
    """Publish message to an MQTT topic."""
    ...

@callback
@bind_hass
def async_publish(
    hass: HomeAssistant, topic: Any, payload, qos=..., retain=...
) -> None:
    """Publish message to an MQTT topic."""
    ...

@bind_hass
def publish_template(
    hass: HomeAssistant, topic, payload_template, qos=..., retain=...
) -> None:
    """Publish message to an MQTT topic."""
    ...

@bind_hass
def async_publish_template(
    hass: HomeAssistant, topic, payload_template, qos=..., retain=...
) -> None:
    """Publish message to an MQTT topic using a template payload."""
    ...

AsyncDeprecatedMessageCallbackType = Callable[
    [str, ReceivePayloadType, int], Awaitable[None]
]
DeprecatedMessageCallbackType = Callable[[str, ReceivePayloadType, int], None]

def wrap_msg_callback(
    msg_callback: AsyncDeprecatedMessageCallbackType | DeprecatedMessageCallbackType,
) -> AsyncMessageCallbackType | MessageCallbackType:
    """Wrap an MQTT message callback to support deprecated signature."""
    ...

@bind_hass
async def async_subscribe(
    hass: HomeAssistant,
    topic: str,
    msg_callback: AsyncMessageCallbackType
    | MessageCallbackType
    | DeprecatedMessageCallbackType
    | AsyncDeprecatedMessageCallbackType,
    qos: int = ...,
    encoding: str | None = ...,
):
    """Subscribe to an MQTT topic.

    Call the return value to unsubscribe.
    """
    ...

@bind_hass
def subscribe(
    hass: HomeAssistant,
    topic: str,
    msg_callback: MessageCallbackType,
    qos: int = ...,
    encoding: str = ...,
) -> Callable[[], None]:
    """Subscribe to an MQTT topic."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Start the MQTT protocol service."""
    ...

async def async_setup_entry(hass, entry):  # -> bool:
    """Load a config entry."""
    ...

@attr.s(slots=True, frozen=True)
class Subscription:
    """Class to hold data about an active subscription."""

    topic: str = ...
    matcher: Any = ...
    job: HassJob = ...
    qos: int = ...
    encoding: str | None = ...

class MQTT:
    """Home Assistant MQTT client."""

    def __init__(self, hass: HomeAssistant, config_entry, conf) -> None:
        """Initialize Home Assistant MQTT client."""
        ...
    @staticmethod
    async def async_config_entry_updated(hass, entry) -> None:
        """Handle signals of config entry being updated.

        This is a static method because a class method (bound method), can not be used with weak references.
        Causes for this is config entry options changing.
        """
        ...
    def init_client(self):  # -> None:
        """Initialize paho client."""
        ...
    async def async_publish(
        self, topic: str, payload: PublishPayloadType, qos: int, retain: bool
    ) -> None:
        """Publish a MQTT message."""
        ...
    async def async_connect(self) -> None:
        """Connect to the host. Does not process messages yet."""
        ...
    async def async_disconnect(self):  # -> None:
        """Stop the MQTT client."""
        ...
    async def async_subscribe(
        self,
        topic: str,
        msg_callback: MessageCallbackType,
        qos: int,
        encoding: str | None = ...,
    ) -> Callable[[], None]:
        """Set up a subscription to a topic with the provided qos.

        This method is a coroutine.
        """
        ...

@websocket_api.websocket_command(
    {vol.Required("type"): "mqtt/device/debug_info", vol.Required("device_id"): str}
)
@websocket_api.async_response
async def websocket_mqtt_info(hass, connection, msg):  # -> None:
    """Get MQTT debug info for device."""
    ...

@websocket_api.websocket_command(
    {vol.Required("type"): "mqtt/device/remove", vol.Required("device_id"): str}
)
@websocket_api.async_response
async def websocket_remove_device(hass, connection, msg):  # -> None:
    """Delete device."""
    ...

@websocket_api.websocket_command(
    {
        vol.Required("type"): "mqtt/subscribe",
        vol.Required("topic"): valid_subscribe_topic,
    }
)
@websocket_api.async_response
async def websocket_subscribe(hass, connection, msg):  # -> None:
    """Subscribe to a MQTT topic."""
    ...

ConnectionStatusCallback = Callable[[bool], None]

@callback
def async_subscribe_connection_status(
    hass: HomeAssistant, connection_status_callback: ConnectionStatusCallback
) -> Callable[[], None]:
    """Subscribe to MQTT connection changes."""
    ...

def is_connected(hass: HomeAssistant) -> bool:
    """Return if MQTT client is connected."""
    ...
