"""
This type stub file was generated by pyright.
"""

from __future__ import annotations
import voluptuous as vol
from collections.abc import Callable
from typing import Any, TypeVar
from homeassistant.components import websocket_api
from homeassistant.config_entries import ConfigEntry
from homeassistant.core import HomeAssistant, callback
from homeassistant.helpers.device_registry import DeviceEntry
from homeassistant.helpers.typing import ConfigType
from .util import valid_qos_schema, valid_subscribe_topic

"""Support for MQTT message handling."""
_LOGGER = ...
SERVICE_PUBLISH = ...
SERVICE_DUMP = ...
ATTR_TOPIC_TEMPLATE = ...
ATTR_PAYLOAD_TEMPLATE = ...
MAX_RECONNECT_WAIT = ...
CONNECTION_SUCCESS = ...
CONNECTION_FAILED = ...
CONNECTION_FAILED_RECOVERABLE = ...
CONFIG_ENTRY_CONFIG_KEYS = ...
_T = TypeVar("_T")
REMOVED_OPTIONS = ...
CONFIG_SCHEMA = ...
MQTT_PUBLISH_SCHEMA = ...

async def async_check_config_schema(
    hass: HomeAssistant, config_yaml: ConfigType
) -> None:
    """Validate manually configured MQTT items."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Load a config entry."""
    ...

@websocket_api.websocket_command(
    {vol.Required("type"): "mqtt/device/debug_info", vol.Required("device_id"): str}
)
@callback
def websocket_mqtt_info(
    hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]
) -> None:
    """Get MQTT debug info for device."""
    ...

@websocket_api.websocket_command(
    {
        vol.Required("type"): "mqtt/subscribe",
        vol.Required("topic"): valid_subscribe_topic,
        vol.Optional("qos"): valid_qos_schema,
    }
)
@websocket_api.async_response
async def websocket_subscribe(
    hass: HomeAssistant, connection: websocket_api.ActiveConnection, msg: dict[str, Any]
) -> None:
    """Subscribe to a MQTT topic."""
    ...

ConnectionStatusCallback = Callable[[bool], None]

@callback
def async_subscribe_connection_status(
    hass: HomeAssistant, connection_status_callback: ConnectionStatusCallback
) -> Callable[[], None]:
    """Subscribe to MQTT connection changes."""
    ...

def is_connected(hass: HomeAssistant) -> bool:
    """Return if MQTT client is connected."""
    ...

async def async_remove_config_entry_device(
    hass: HomeAssistant, config_entry: ConfigEntry, device_entry: DeviceEntry
) -> bool:
    """Remove MQTT config entry from a device."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload MQTT dump and publish service when the config entry is unloaded."""
    ...
