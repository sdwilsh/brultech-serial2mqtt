"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from dataclasses import dataclass
from typing import Any, Final, TYPE_CHECKING
from bleak import BleakClient
from bleak.backends.client import BaseBleakClient
from bleak.backends.device import BLEDevice
from bleak.backends.scanner import AdvertisementDataCallback, BaseBleakScanner
from .base_scanner import BaseHaScanner

"""Bleak wrappers for bluetooth."""
FILTER_UUIDS: Final = ...
_LOGGER = ...
if TYPE_CHECKING: ...

@dataclass(slots=True)
class _HaWrappedBleakBackend:
    """Wrap bleak backend to make it usable by Home Assistant."""

    device: BLEDevice
    scanner: BaseHaScanner
    client: type[BaseBleakClient]
    source: str | None
    ...

class HaBleakScannerWrapper(BaseBleakScanner):
    """A wrapper that uses the single instance."""
    def __init__(
        self,
        *args: Any,
        detection_callback: AdvertisementDataCallback | None = ...,
        service_uuids: list[str] | None = ...,
        **kwargs: Any,
    ) -> None:
        """Initialize the BleakScanner."""
        ...

    @classmethod
    async def discover(cls, timeout: float = ..., **kwargs: Any) -> list[BLEDevice]:
        """Discover devices."""
        ...

    async def stop(self, *args: Any, **kwargs: Any) -> None:
        """Stop scanning for devices."""
        ...

    async def start(self, *args: Any, **kwargs: Any) -> None:
        """Start scanning for devices."""
        ...

    def set_scanning_filter(self, *args: Any, **kwargs: Any) -> None:
        """Set the filters to use."""
        ...

    @property
    def discovered_devices(self) -> list[BLEDevice]:
        """Return a list of discovered devices."""
        ...

    def register_detection_callback(
        self, callback: AdvertisementDataCallback | None
    ) -> Callable[[], None]:
        """Register a detection callback.

        The callback is called when a device is discovered or has a property changed.

        This method takes the callback and registers it with the long running scanner.
        """
        ...

    def __del__(self) -> None:
        """Delete the BleakScanner."""
        ...

class HaBleakClientWrapper(BleakClient):
    """Wrap the BleakClient to ensure it does not shutdown our scanner.

    If an address is passed into BleakClient instead of a BLEDevice,
    bleak will quietly start a new scanner under the hood to resolve
    the address. This can cause a conflict with our scanner. We need
    to handle translating the address to the BLEDevice in this case
    to avoid the whole stack from getting stuck in an in progress state
    when an integration does this.
    """
    def __init__(
        self,
        address_or_ble_device: str | BLEDevice,
        disconnected_callback: Callable[[BleakClient], None] | None = ...,
        *args: Any,
        timeout: float = ...,
        **kwargs: Any,
    ) -> None:
        """Initialize the BleakClient."""
        ...

    @property
    def is_connected(self) -> bool:
        """Return True if the client is connected to a device."""
        ...

    async def clear_cache(self) -> bool:
        """Clear the GATT cache."""
        ...

    def set_disconnected_callback(
        self, callback: Callable[[BleakClient], None] | None, **kwargs: Any
    ) -> None:
        """Set the disconnect callback."""
        ...

    async def connect(self, **kwargs: Any) -> bool:
        """Connect to the specified GATT server."""
        ...

    async def disconnect(self) -> bool:
        """Disconnect from the device."""
        ...
