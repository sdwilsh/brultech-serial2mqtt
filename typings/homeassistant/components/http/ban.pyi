"""
This type stub file was generated by pyright.
"""

from collections.abc import Awaitable, Callable, Coroutine
from datetime import datetime
from ipaddress import IPv4Address, IPv6Address
from typing import Any, Concatenate, Final, TypeVar
from aiohttp.web import Application, Request, Response, StreamResponse, middleware
from homeassistant.core import HomeAssistant, callback
from .view import HomeAssistantView

"""Ban logic for HTTP component."""
_HassViewT = TypeVar("_HassViewT", bound=HomeAssistantView)
_P = ...
_LOGGER: Final = ...
KEY_BAN_MANAGER: Final = ...
KEY_FAILED_LOGIN_ATTEMPTS: Final = ...
KEY_LOGIN_THRESHOLD: Final = ...
NOTIFICATION_ID_BAN: Final = ...
NOTIFICATION_ID_LOGIN: Final = ...
IP_BANS_FILE: Final = ...
ATTR_BANNED_AT: Final = ...
SCHEMA_IP_BAN_ENTRY: Final = ...

@callback
def setup_bans(hass: HomeAssistant, app: Application, login_threshold: int) -> None:
    """Create IP Ban middleware for the app."""
    ...

@middleware
async def ban_middleware(
    request: Request, handler: Callable[[Request], Awaitable[StreamResponse]]
) -> StreamResponse:
    """IP Ban middleware."""
    ...

def log_invalid_auth(
    func: Callable[Concatenate[_HassViewT, Request, _P], Awaitable[Response]]
) -> Callable[Concatenate[_HassViewT, Request, _P], Coroutine[Any, Any, Response]]:
    """Decorate function to handle invalid auth or failed login attempts."""
    ...

async def process_wrong_login(request: Request) -> None:
    """Process a wrong login attempt.

    Increase failed login attempts counter for remote IP address.
    Add ip ban entry if failed login attempts exceeds threshold.
    """
    ...

@callback
def process_success_login(request: Request) -> None:
    """Process a success login attempt.

    Reset failed login attempts counter for remote IP address.
    No release IP address from banned list function, it can only be done by
    manual modify ip bans config file.
    """
    ...

class IpBan:
    """Represents banned IP address."""
    def __init__(
        self, ip_ban: str | IPv4Address | IPv6Address, banned_at: datetime | None = ...
    ) -> None:
        """Initialize IP Ban object."""
        ...

class IpBanManager:
    """Manage IP bans."""
    def __init__(self, hass: HomeAssistant) -> None:
        """Init the ban manager."""
        ...

    async def async_load(self) -> None:
        """Load the existing IP bans."""
        ...

    async def async_add_ban(self, remote_addr: IPv4Address | IPv6Address) -> None:
        """Add a new IP address to the banned list."""
        ...
