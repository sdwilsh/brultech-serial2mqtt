"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import logging
from typing import Any, Awaitable, Callable, Dict, TypedDict, cast

import homeassistant.helpers.config_validation as cv
import voluptuous as vol
from homeassistant.components import blueprint
from homeassistant.const import (
    ATTR_ENTITY_ID,
    ATTR_MODE,
    ATTR_NAME,
    CONF_ALIAS,
    CONF_CONDITION,
    CONF_DEVICE_ID,
    CONF_ENTITY_ID,
    CONF_ID,
    CONF_MODE,
    CONF_PLATFORM,
    CONF_VARIABLES,
    CONF_ZONE,
    EVENT_HOMEASSISTANT_STARTED,
    SERVICE_RELOAD,
    SERVICE_TOGGLE,
    SERVICE_TURN_OFF,
    SERVICE_TURN_ON,
    STATE_ON,
)
from homeassistant.core import (
    Context,
    CoreState,
    HomeAssistant,
    callback,
    split_entity_id,
)
from homeassistant.exceptions import (
    ConditionError,
    ConditionErrorContainer,
    ConditionErrorIndex,
    HomeAssistantError,
)
from homeassistant.helpers import condition, extract_domain_configs, template
from homeassistant.helpers.entity import ToggleEntity
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.restore_state import RestoreEntity
from homeassistant.helpers.script import (
    ATTR_CUR,
    ATTR_MAX,
    CONF_MAX,
    CONF_MAX_EXCEEDED,
    Script,
)
from homeassistant.helpers.script_variables import ScriptVariables
from homeassistant.helpers.service import (
    ReloadServiceHelper,
    async_register_admin_service,
)
from homeassistant.helpers.trace import (
    TraceElement,
    script_execution_set,
    trace_append_element,
    trace_get,
    trace_path,
)
from homeassistant.helpers.trigger import async_initialize_triggers
from homeassistant.helpers.typing import TemplateVarsType
from homeassistant.loader import bind_hass
from homeassistant.util.dt import parse_datetime
from voluptuous.humanize import humanize_error

from .config import AutomationConfig, async_validate_config_item
from .const import (
    CONF_ACTION,
    CONF_INITIAL_STATE,
    CONF_TRACE,
    CONF_TRIGGER,
    CONF_TRIGGER_VARIABLES,
    DEFAULT_INITIAL_STATE,
    DOMAIN,
    LOGGER,
)
from .helpers import async_get_blueprints
from .trace import trace_automation

"""Allow to set up simple automation rules via the config file."""
ENTITY_ID_FORMAT = ...
CONF_SKIP_CONDITION = ...
CONF_STOP_ACTIONS = ...
DEFAULT_STOP_ACTIONS = ...
EVENT_AUTOMATION_RELOADED = ...
EVENT_AUTOMATION_TRIGGERED = ...
ATTR_LAST_TRIGGERED = ...
ATTR_SOURCE = ...
ATTR_VARIABLES = ...
SERVICE_TRIGGER = ...
_LOGGER = ...
AutomationActionType = Callable[[HomeAssistant, TemplateVarsType], Awaitable[None]]

class AutomationTriggerData(TypedDict):
    """Automation trigger data."""

    id: str
    idx: str
    ...

class AutomationTriggerInfo(TypedDict):
    """Information about automation trigger."""

    domain: str
    name: str
    home_assistant_start: bool
    variables: TemplateVarsType
    trigger_data: AutomationTriggerData
    ...

@bind_hass
def is_on(hass, entity_id):
    """
    Return true if specified automation entity_id is on.

    Async friendly.
    """
    ...

@callback
def automations_with_entity(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all automations that reference the entity."""
    ...

@callback
def entities_in_automation(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all entities in a scene."""
    ...

@callback
def automations_with_device(hass: HomeAssistant, device_id: str) -> list[str]:
    """Return all automations that reference the device."""
    ...

@callback
def devices_in_automation(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all devices in a scene."""
    ...

@callback
def automations_with_area(hass: HomeAssistant, area_id: str) -> list[str]:
    """Return all automations that reference the area."""
    ...

@callback
def areas_in_automation(hass: HomeAssistant, entity_id: str) -> list[str]:
    """Return all areas in an automation."""
    ...

async def async_setup(hass, config):  # -> Literal[True]:
    """Set up all automations."""
    ...

class AutomationEntity(ToggleEntity, RestoreEntity):
    """Entity to show status of entity."""

    _attr_should_poll = ...
    def __init__(
        self,
        automation_id,
        name,
        trigger_config,
        cond_func,
        action_script,
        initial_state,
        variables,
        trigger_variables,
        raw_config,
        blueprint_inputs,
        trace_config,
    ) -> None:
        """Initialize an automation entity."""
        ...
    @property
    def extra_state_attributes(self):  # -> dict[str, Unknown]:
        """Return the entity state attributes."""
        ...
    @property
    def is_on(self) -> bool:
        """Return True if entity is on."""
        ...
    @property
    def referenced_areas(self):
        """Return a set of referenced areas."""
        ...
    @property
    def referenced_devices(self):  # -> set[str]:
        """Return a set of referenced devices."""
        ...
    @property
    def referenced_entities(self):  # -> set[str]:
        """Return a set of referenced entities."""
        ...
    async def async_added_to_hass(self) -> None:
        """Startup with initial state or previous state."""
        ...
    async def async_turn_on(self, **kwargs: Any) -> None:
        """Turn the entity on and update the state."""
        ...
    async def async_turn_off(self, **kwargs: Any) -> None:
        """Turn the entity off."""
        ...
    async def async_trigger(self, run_variables, context=..., skip_condition=...):
        """Trigger automation.

        This method is a coroutine.
        """
        ...
    async def async_will_remove_from_hass(self):  # -> None:
        """Remove listeners when removing automation from Home Assistant."""
        ...
    async def async_enable(self):  # -> None:
        """Enable this automation entity.

        This method is a coroutine.
        """
        ...
    async def async_disable(self, stop_actions=...):  # -> None:
        """Disable the automation entity."""
        ...
