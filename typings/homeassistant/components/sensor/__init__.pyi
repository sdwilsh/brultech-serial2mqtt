"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import inspect
import logging
from collections.abc import Mapping
from contextlib import suppress
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any, Final, cast, final

import voluptuous as vol
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import (
    DEVICE_CLASS_AQI,
    DEVICE_CLASS_BATTERY,
    DEVICE_CLASS_CO,
    DEVICE_CLASS_CO2,
    DEVICE_CLASS_CURRENT,
    DEVICE_CLASS_DATE,
    DEVICE_CLASS_ENERGY,
    DEVICE_CLASS_GAS,
    DEVICE_CLASS_HUMIDITY,
    DEVICE_CLASS_ILLUMINANCE,
    DEVICE_CLASS_MONETARY,
    DEVICE_CLASS_NITROGEN_DIOXIDE,
    DEVICE_CLASS_NITROGEN_MONOXIDE,
    DEVICE_CLASS_NITROUS_OXIDE,
    DEVICE_CLASS_OZONE,
    DEVICE_CLASS_PM1,
    DEVICE_CLASS_PM10,
    DEVICE_CLASS_PM25,
    DEVICE_CLASS_POWER,
    DEVICE_CLASS_POWER_FACTOR,
    DEVICE_CLASS_PRESSURE,
    DEVICE_CLASS_SIGNAL_STRENGTH,
    DEVICE_CLASS_SULPHUR_DIOXIDE,
    DEVICE_CLASS_TEMPERATURE,
    DEVICE_CLASS_TIMESTAMP,
    DEVICE_CLASS_VOLATILE_ORGANIC_COMPOUNDS,
    DEVICE_CLASS_VOLTAGE,
    TEMP_CELSIUS,
    TEMP_FAHRENHEIT,
)
from homeassistant.core import HomeAssistant
from homeassistant.helpers.config_validation import (
    PLATFORM_SCHEMA,
    PLATFORM_SCHEMA_BASE,
)
from homeassistant.helpers.entity import Entity, EntityDescription
from homeassistant.helpers.entity_component import EntityComponent
from homeassistant.helpers.typing import ConfigType, StateType

from .const import CONF_STATE_CLASS

"""Component to interface with various sensors that can be monitored."""
_LOGGER: Final = ...
ATTR_LAST_RESET: Final = ...
ATTR_STATE_CLASS: Final = ...
DOMAIN: Final = ...
ENTITY_ID_FORMAT: Final = ...
SCAN_INTERVAL: Final = ...
DEVICE_CLASSES: Final[list[str]] = ...
DEVICE_CLASSES_SCHEMA: Final = ...
STATE_CLASS_MEASUREMENT: Final = ...
STATE_CLASS_TOTAL: Final = ...
STATE_CLASS_TOTAL_INCREASING: Final = ...
STATE_CLASSES: Final[list[str]] = ...
STATE_CLASSES_SCHEMA: Final = ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Track states and offer events for sensors."""
    ...

async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Set up a config entry."""
    ...

async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """Unload a config entry."""
    ...

@dataclass
class SensorEntityDescription(EntityDescription):
    """A class that describes sensor entities."""

    last_reset: datetime | None = ...
    native_unit_of_measurement: str | None = ...
    state_class: str | None = ...
    unit_of_measurement: None = ...
    def __post_init__(self) -> None:
        """Post initialisation processing."""
        ...

class SensorEntity(Entity):
    """Base class for sensor entities."""

    entity_description: SensorEntityDescription
    _attr_last_reset: datetime | None
    _attr_native_unit_of_measurement: str | None
    _attr_native_value: StateType = ...
    _attr_state_class: str | None
    _attr_state: None = ...
    _attr_unit_of_measurement: None = ...
    _last_reset_reported = ...
    _temperature_conversion_reported = ...
    @property
    def state_class(self) -> str | None:
        """Return the state class of this entity, from STATE_CLASSES, if any."""
        ...
    @property
    def last_reset(self) -> datetime | None:
        """Return the time when the sensor was last reset, if any."""
        ...
    @property
    def capability_attributes(self) -> Mapping[str, Any] | None:
        """Return the capability attributes."""
        ...
    @final
    @property
    def state_attributes(self) -> dict[str, Any] | None:
        """Return state attributes."""
        ...
    @property
    def native_value(self) -> StateType:
        """Return the value reported by the sensor."""
        ...
    @property
    def native_unit_of_measurement(self) -> str | None:
        """Return the unit of measurement of the sensor, if any."""
        ...
    @final
    @property
    def unit_of_measurement(self) -> str | None:
        """Return the unit of measurement of the entity, after unit conversion."""
        ...
    @final
    @property
    def state(self) -> Any:
        """Return the state of the sensor and perform unit conversions, if needed."""
        ...
    def __repr__(self) -> str:
        """Return the representation.

        Entity.__repr__ includes the state in the generated string, this fails if we're
        called before self.hass is set.
        """
        ...
