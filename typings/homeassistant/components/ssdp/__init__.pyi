"""
This type stub file was generated by pyright.
"""

from __future__ import annotations
from collections.abc import Awaitable, Callable, Mapping
from dataclasses import dataclass
from ipaddress import IPv4Address, IPv6Address
from typing import Any
from async_upnp_client.const import SsdpSource
from async_upnp_client.server import UpnpServerDevice, UpnpServerService
from async_upnp_client.ssdp_listener import SsdpDevice
from async_upnp_client.utils import CaseInsensitiveDict
from homeassistant.core import HomeAssistant, callback as core_callback
from homeassistant.data_entry_flow import BaseServiceInfo
from homeassistant.helpers.typing import ConfigType
from homeassistant.loader import bind_hass

"""The SSDP integration."""
DOMAIN = ...
SSDP_SCANNER = ...
UPNP_SERVER = ...
UPNP_SERVER_MIN_PORT = ...
UPNP_SERVER_MAX_PORT = ...
SCAN_INTERVAL = ...
IPV4_BROADCAST = ...
ATTR_SSDP_LOCATION = ...
ATTR_SSDP_ST = ...
ATTR_SSDP_NT = ...
ATTR_SSDP_UDN = ...
ATTR_SSDP_USN = ...
ATTR_SSDP_EXT = ...
ATTR_SSDP_SERVER = ...
ATTR_SSDP_BOOTID = ...
ATTR_SSDP_NEXTBOOTID = ...
ATTR_ST = ...
ATTR_NT = ...
ATTR_UPNP_DEVICE_TYPE = ...
ATTR_UPNP_FRIENDLY_NAME = ...
ATTR_UPNP_MANUFACTURER = ...
ATTR_UPNP_MANUFACTURER_URL = ...
ATTR_UPNP_MODEL_DESCRIPTION = ...
ATTR_UPNP_MODEL_NAME = ...
ATTR_UPNP_MODEL_NUMBER = ...
ATTR_UPNP_MODEL_URL = ...
ATTR_UPNP_SERIAL = ...
ATTR_UPNP_SERVICE_LIST = ...
ATTR_UPNP_UDN = ...
ATTR_UPNP_UPC = ...
ATTR_UPNP_PRESENTATION_URL = ...
ATTR_HA_MATCHING_DOMAINS = ...
PRIMARY_MATCH_KEYS = ...
_LOGGER = ...
CONFIG_SCHEMA = ...

@dataclass(slots=True)
class SsdpServiceInfo(BaseServiceInfo):
    """Prepared info from ssdp/upnp entries."""

    ssdp_usn: str
    ssdp_st: str
    upnp: Mapping[str, Any]
    ssdp_location: str | None = ...
    ssdp_nt: str | None = ...
    ssdp_udn: str | None = ...
    ssdp_ext: str | None = ...
    ssdp_server: str | None = ...
    ssdp_headers: Mapping[str, Any] = ...
    ssdp_all_locations: set[str] = ...
    x_homeassistant_matching_domains: set[str] = ...

SsdpChange = ...
SsdpCallback = Callable[[SsdpServiceInfo, SsdpChange], Awaitable]
SSDP_SOURCE_SSDP_CHANGE_MAPPING: Mapping[SsdpSource, SsdpChange] = ...

@bind_hass
async def async_register_callback(
    hass: HomeAssistant, callback: SsdpCallback, match_dict: None | dict[str, str] = ...
) -> Callable[[], None]:
    """Register to receive a callback on ssdp broadcast.

    Returns a callback that can be used to cancel the registration.
    """
    ...

@bind_hass
async def async_get_discovery_info_by_udn_st(
    hass: HomeAssistant, udn: str, st: str
) -> SsdpServiceInfo | None:
    """Fetch the discovery info cache."""
    ...

@bind_hass
async def async_get_discovery_info_by_st(
    hass: HomeAssistant, st: str
) -> list[SsdpServiceInfo]:
    """Fetch all the entries matching the st."""
    ...

@bind_hass
async def async_get_discovery_info_by_udn(
    hass: HomeAssistant, udn: str
) -> list[SsdpServiceInfo]:
    """Fetch all the entries matching the udn."""
    ...

async def async_build_source_set(hass: HomeAssistant) -> set[IPv4Address | IPv6Address]:
    """Build the list of ssdp sources."""
    ...

async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
    """Set up the SSDP integration."""
    ...

class IntegrationMatchers:
    """Optimized integration matching."""
    def __init__(self) -> None:
        """Init optimized integration matching."""
        ...

    @core_callback
    def async_setup(
        self, integration_matchers: dict[str, list[dict[str, str]]]
    ) -> None:
        """Build matchers by key.

        Here we convert the primary match keys into their own
        dicts so we can do lookups of the primary match
        key to find the match dict.
        """
        ...

    @core_callback
    def async_matching_domains(self, info_with_desc: CaseInsensitiveDict) -> set[str]:
        """Find domains matching the passed CaseInsensitiveDict."""
        ...

class Scanner:
    """Class to manage SSDP searching and SSDP advertisements."""
    def __init__(
        self, hass: HomeAssistant, integration_matchers: IntegrationMatchers
    ) -> None:
        """Initialize class."""
        ...

    async def async_register_callback(
        self, callback: SsdpCallback, match_dict: None | dict[str, str] = ...
    ) -> Callable[[], None]:
        """Register a callback."""
        ...

    async def async_stop(self, *_: Any) -> None:
        """Stop the scanner."""
        ...

    async def async_scan(self, *_: Any) -> None:
        """Scan for new entries using ssdp listeners."""
        ...

    async def async_scan_multicast(self, *_: Any) -> None:
        """Scan for new entries using multicase target."""
        ...

    async def async_scan_broadcast(self, *_: Any) -> None:
        """Scan for new entries using broadcast target."""
        ...

    async def async_start(self) -> None:
        """Start the scanners."""
        ...

    async def async_get_discovery_info_by_udn_st(
        self, udn: str, st: str
    ) -> SsdpServiceInfo | None:
        """Return discovery_info for a udn and st."""
        ...

    async def async_get_discovery_info_by_st(self, st: str) -> list[SsdpServiceInfo]:
        """Return matching discovery_infos for a st."""
        ...

    async def async_get_discovery_info_by_udn(self, udn: str) -> list[SsdpServiceInfo]:
        """Return matching discovery_infos for a udn."""
        ...

def discovery_info_from_headers_and_description(
    ssdp_device: SsdpDevice,
    combined_headers: CaseInsensitiveDict,
    info_desc: Mapping[str, Any],
) -> SsdpServiceInfo:
    """Convert headers and description to discovery_info."""
    ...

class HassUpnpServiceDevice(UpnpServerDevice):
    """Hass Device."""

    DEVICE_DEFINITION = ...
    EMBEDDED_DEVICES: list[type[UpnpServerDevice]] = ...
    SERVICES: list[type[UpnpServerService]] = ...

class Server:
    """Class to be visible via SSDP searching and advertisements."""
    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize class."""
        ...

    async def async_start(self) -> None:
        """Start the server."""
        ...

    async def async_stop(self, *_: Any) -> None:
        """Stop the server."""
        ...
