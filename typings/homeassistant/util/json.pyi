"""
This type stub file was generated by pyright.
"""

import json
from collections.abc import Callable
from typing import Any

from homeassistant.exceptions import HomeAssistantError

"""JSON utility functions."""
_LOGGER = ...

class SerializationError(HomeAssistantError):
    """Error serializing the data to JSON."""

    ...

class WriteError(HomeAssistantError):
    """Error writing the data."""

    ...

def load_json(filename: str, default: list | dict | None = ...) -> list | dict:
    """Load JSON data from a file and return as dict or list.

    Defaults to returning empty dict if file is not found.
    """
    ...

def save_json(
    filename: str,
    data: list | dict,
    private: bool = ...,
    *,
    encoder: type[json.JSONEncoder] | None = ...
) -> None:
    """Save JSON data to a file.

    Returns True on success.
    """
    ...

def format_unserializable_data(data: dict[str, Any]) -> str:
    """Format output of find_paths in a friendly way.

    Format is comma separated: <path>=<value>(<type>)
    """
    ...

def find_paths_unserializable_data(
    bad_data: Any, *, dump: Callable[[Any], str] = ...
) -> dict[str, Any]:
    """Find the paths to unserializable data.

    This method is slow! Only use for error handling.
    """
    ...
