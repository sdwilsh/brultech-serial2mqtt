"""
This type stub file was generated by pyright.
"""

from typing import Final, TYPE_CHECKING
from homeassistant.const import (
    UnitOfLength,
    UnitOfMass,
    UnitOfPrecipitationDepth,
    UnitOfPressure,
    UnitOfSpeed,
    UnitOfTemperature,
    UnitOfVolume,
)
from homeassistant.components.sensor import SensorDeviceClass

"""Unit system helper class and methods."""
if TYPE_CHECKING: ...
_CONF_UNIT_SYSTEM_IMPERIAL: Final = ...
_CONF_UNIT_SYSTEM_METRIC: Final = ...
_CONF_UNIT_SYSTEM_US_CUSTOMARY: Final = ...
LENGTH_UNITS = ...
MASS_UNITS: set[str] = ...
PRESSURE_UNITS = ...
VOLUME_UNITS = ...
WIND_SPEED_UNITS = ...
TEMPERATURE_UNITS: set[str] = ...

class UnitSystem:
    """A container for units of measure."""
    def __init__(
        self,
        name: str,
        *,
        accumulated_precipitation: UnitOfPrecipitationDepth,
        conversions: dict[tuple[SensorDeviceClass | str | None, str | None], str],
        length: UnitOfLength,
        mass: UnitOfMass,
        pressure: UnitOfPressure,
        temperature: UnitOfTemperature,
        volume: UnitOfVolume,
        wind_speed: UnitOfSpeed,
    ) -> None:
        """Initialize the unit system object."""
        ...

    def temperature(self, temperature: float, from_unit: str) -> float:
        """Convert the given temperature to this unit system."""
        ...

    def length(self, length: float | None, from_unit: str) -> float:
        """Convert the given length to this unit system."""
        ...

    def accumulated_precipitation(self, precip: float | None, from_unit: str) -> float:
        """Convert the given length to this unit system."""
        ...

    def pressure(self, pressure: float | None, from_unit: str) -> float:
        """Convert the given pressure to this unit system."""
        ...

    def wind_speed(self, wind_speed: float | None, from_unit: str) -> float:
        """Convert the given wind_speed to this unit system."""
        ...

    def volume(self, volume: float | None, from_unit: str) -> float:
        """Convert the given volume to this unit system."""
        ...

    def as_dict(self) -> dict[str, str]:
        """Convert the unit system to a dictionary."""
        ...

    def get_converted_unit(
        self, device_class: SensorDeviceClass | str | None, original_unit: str | None
    ) -> str | None:
        """Return converted unit given a device class or an original unit."""
        ...

def get_unit_system(key: str) -> UnitSystem:
    """Get unit system based on key."""
    ...

validate_unit_system = ...
METRIC_SYSTEM = ...
US_CUSTOMARY_SYSTEM = ...
IMPERIAL_SYSTEM = ...
