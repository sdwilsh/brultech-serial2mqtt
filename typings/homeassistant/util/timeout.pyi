"""
This type stub file was generated by pyright.
"""

import asyncio
import enum
from types import TracebackType
from typing import Any

"""Advanced timeout handling.

Set of helper classes to handle timeouts of tasks with advanced options
like zones and freezing of timeouts.
"""
ZONE_GLOBAL = ...

class _State(str, enum.Enum):
    """States of a task."""

    INIT = ...
    ACTIVE = ...
    TIMEOUT = ...
    EXIT = ...

class _GlobalFreezeContext:
    """Context manager that freezes the global timeout."""

    def __init__(self, manager: TimeoutManager) -> None:
        """Initialize internal timeout context manager."""
        ...
    async def __aenter__(self) -> _GlobalFreezeContext: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...
    def __enter__(self) -> _GlobalFreezeContext: ...
    def __exit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...

class _ZoneFreezeContext:
    """Context manager that freezes a zone timeout."""

    def __init__(self, zone: _ZoneTimeoutManager) -> None:
        """Initialize internal timeout context manager."""
        ...
    async def __aenter__(self) -> _ZoneFreezeContext: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...
    def __enter__(self) -> _ZoneFreezeContext: ...
    def __exit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...

class _GlobalTaskContext:
    """Context manager that tracks a global task."""

    def __init__(
        self,
        manager: TimeoutManager,
        task: asyncio.Task[Any],
        timeout: float,
        cool_down: float,
    ) -> None:
        """Initialize internal timeout context manager."""
        ...
    async def __aenter__(self) -> _GlobalTaskContext: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...
    @property
    def state(self) -> _State:
        """Return state of the Global task."""
        ...
    def zones_done_signal(self) -> None:
        """Signal that all zones are done."""
        ...
    def pause(self) -> None:
        """Pause timers while it freeze."""
        ...
    def reset(self) -> None:
        """Reset timer after freeze."""
        ...

class _ZoneTaskContext:
    """Context manager that tracks an active task for a zone."""

    def __init__(
        self, zone: _ZoneTimeoutManager, task: asyncio.Task[Any], timeout: float
    ) -> None:
        """Initialize internal timeout context manager."""
        ...
    @property
    def state(self) -> _State:
        """Return state of the Zone task."""
        ...
    async def __aenter__(self) -> _ZoneTaskContext: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException],
        exc_val: BaseException,
        exc_tb: TracebackType,
    ) -> bool | None: ...
    def pause(self) -> None:
        """Pause timers while it freeze."""
        ...
    def reset(self) -> None:
        """Reset timer after freeze."""
        ...

class _ZoneTimeoutManager:
    """Manage the timeouts for a zone."""

    def __init__(self, manager: TimeoutManager, zone: str) -> None:
        """Initialize internal timeout context manager."""
        ...
    def __repr__(self) -> str:
        """Representation of a zone."""
        ...
    @property
    def name(self) -> str:
        """Return Zone name."""
        ...
    @property
    def active(self) -> bool:
        """Return True if zone is active."""
        ...
    @property
    def freezes_done(self) -> bool:
        """Return True if all freeze are done."""
        ...
    def enter_task(self, task: _ZoneTaskContext) -> None:
        """Start into new Task."""
        ...
    def exit_task(self, task: _ZoneTaskContext) -> None:
        """Exit a running Task."""
        ...
    def enter_freeze(self, freeze: _ZoneFreezeContext) -> None:
        """Start into new freeze."""
        ...
    def exit_freeze(self, freeze: _ZoneFreezeContext) -> None:
        """Exit a running Freeze."""
        ...
    def pause(self) -> None:
        """Stop timers while it freeze."""
        ...
    def reset(self) -> None:
        """Reset timer after freeze."""
        ...

class TimeoutManager:
    """Class to manage timeouts over different zones.

    Manages both global and zone based timeouts.
    """

    def __init__(self) -> None:
        """Initialize TimeoutManager."""
        ...
    @property
    def zones_done(self) -> bool:
        """Return True if all zones are finished."""
        ...
    @property
    def freezes_done(self) -> bool:
        """Return True if all freezes are finished."""
        ...
    @property
    def zones(self) -> dict[str, _ZoneTimeoutManager]:
        """Return all Zones."""
        ...
    @property
    def global_tasks(self) -> list[_GlobalTaskContext]:
        """Return all global Tasks."""
        ...
    @property
    def global_freezes(self) -> list[_GlobalFreezeContext]:
        """Return all global Freezes."""
        ...
    def drop_zone(self, zone_name: str) -> None:
        """Drop a zone out of scope."""
        ...
    def async_timeout(
        self, timeout: float, zone_name: str = ..., cool_down: float = ...
    ) -> _ZoneTaskContext | _GlobalTaskContext:
        """Timeout based on a zone.

        For using as Async Context Manager.
        """
        ...
    def async_freeze(
        self, zone_name: str = ...
    ) -> _ZoneFreezeContext | _GlobalFreezeContext:
        """Freeze all timer until job is done.

        For using as Async Context Manager.
        """
        ...
    def freeze(self, zone_name: str = ...) -> _ZoneFreezeContext | _GlobalFreezeContext:
        """Freeze all timer until job is done.

        For using as Context Manager.
        """
        ...
