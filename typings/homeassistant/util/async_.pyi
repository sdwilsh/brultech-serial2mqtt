"""
This type stub file was generated by pyright.
"""

import concurrent.futures
from asyncio import Future
from asyncio.events import AbstractEventLoop
from collections.abc import Callable
from typing import Any, TypeVar

"""Asyncio utilities."""
_LOGGER = ...
_SHUTDOWN_RUN_CALLBACK_THREADSAFE = ...
_T = TypeVar("_T")
_R = TypeVar("_R")
_P = ...

def cancelling(task: Future[Any]) -> bool:
    """Return True if task is cancelling."""
    ...

def run_callback_threadsafe(
    loop: AbstractEventLoop, callback: Callable[..., _T], *args: Any
) -> concurrent.futures.Future[_T]:
    """Submit a callback object to a given event loop.

    Return a concurrent.futures.Future to access the result.
    """
    ...

def check_loop(
    func: Callable[..., Any], strict: bool = ..., advise_msg: str | None = ...
) -> None:
    """Warn if called inside the event loop. Raise if `strict` is True.

    The default advisory message is 'Use `await hass.async_add_executor_job()'
    Set `advise_msg` to an alternate message if the solution differs.
    """
    ...

def protect_loop(func: Callable[_P, _R], strict: bool = ...) -> Callable[_P, _R]:
    """Protect function from running in event loop."""
    ...

async def gather_with_limited_concurrency(
    limit: int, *tasks: Any, return_exceptions: bool = ...
) -> Any:
    """Wrap asyncio.gather to limit the number of concurrent tasks.

    From: https://stackoverflow.com/a/61478547/9127614
    """
    ...

def shutdown_run_callback_threadsafe(loop: AbstractEventLoop) -> None:
    """Call when run_callback_threadsafe should prevent creating new futures.

    We must finish all callbacks before the executor is shutdown
    or we can end up in a deadlock state where:

    `executor.result()` is waiting for its `._condition`
    and the executor shutdown is trying to `.join()` the
    executor thread.

    This function is considered irreversible and should only ever
    be called when Home Assistant is going to shutdown and
    python is going to exit.
    """
    ...
