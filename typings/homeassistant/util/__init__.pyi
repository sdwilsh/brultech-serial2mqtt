"""
This type stub file was generated by pyright.
"""

from __future__ import annotations

import asyncio
import enum
import random
import re
import socket
import string
import threading
from collections.abc import Callable, Coroutine, Iterable, KeysView
from datetime import datetime, timedelta
from functools import lru_cache, wraps
from types import MappingProxyType
from typing import Any, TypeVar

import slugify as unicode_slug

from ..helpers.deprecation import deprecated_function
from .dt import as_local, utcnow

"""Helper methods for various modules."""
T = ...
U = ...
ENUM_T = ...
RE_SANITIZE_FILENAME = ...
RE_SANITIZE_PATH = ...

def raise_if_invalid_filename(filename: str) -> None:
    """
    Check if a filename is valid.

    Raises a ValueError if the filename is invalid.
    """
    ...

def raise_if_invalid_path(path: str) -> None:
    """
    Check if a path is valid.

    Raises a ValueError if the path is invalid.
    """
    ...

@deprecated_function(replacement="raise_if_invalid_filename")
def sanitize_filename(filename: str) -> str:
    """Check if a filename is safe.

    Only to be used to compare to original filename to check if changed.
    If result changed, the given path is not safe and should not be used,
    raise an error.

    DEPRECATED.
    """
    ...

@deprecated_function(replacement="raise_if_invalid_path")
def sanitize_path(path: str) -> str:
    """Check if a path is safe.

    Only to be used to compare to original path to check if changed.
    If result changed, the given path is not safe and should not be used,
    raise an error.

    DEPRECATED.
    """
    ...

def slugify(text: str | None, *, separator: str = ...) -> str:
    """Slugify a given text."""
    ...

def repr_helper(inp: Any) -> str:
    """Help creating a more readable string representation of objects."""
    ...

def convert(
    value: T | None, to_type: Callable[[T], U], default: U | None = ...
) -> U | None:
    """Convert value to to_type, returns default if fails."""
    ...

def ensure_unique_string(
    preferred_string: str, current_strings: Iterable[str] | KeysView[str]
) -> str:
    """Return a string that is not present in current_strings.

    If preferred string exists will append _2, _3, ..
    """
    ...

@lru_cache(maxsize=None)
def get_local_ip() -> str:
    """Try to determine the local IP address of the machine."""
    ...

def get_random_string(length: int = ...) -> str:
    """Return a random string with letters and digits."""
    ...

class OrderedEnum(enum.Enum):
    """Taken from Python 3.4.0 docs."""

    def __ge__(self, other: ENUM_T) -> bool:
        """Return the greater than element."""
        ...
    def __gt__(self, other: ENUM_T) -> bool:
        """Return the greater element."""
        ...
    def __le__(self, other: ENUM_T) -> bool:
        """Return the lower than element."""
        ...
    def __lt__(self, other: ENUM_T) -> bool:
        """Return the lower element."""
        ...

class Throttle:
    """A class for throttling the execution of tasks.

    This method decorator adds a cooldown to a method to prevent it from being
    called more then 1 time within the timedelta interval `min_time` after it
    returned its result.

    Calling a method a second time during the interval will return None.

    Pass keyword argument `no_throttle=True` to the wrapped method to make
    the call not throttled.

    Decorator takes in an optional second timedelta interval to throttle the
    'no_throttle' calls.

    Adds a datetime attribute `last_call` to the method.
    """

    def __init__(
        self, min_time: timedelta, limit_no_throttle: timedelta | None = ...
    ) -> None:
        """Initialize the throttle."""
        ...
    def __call__(self, method: Callable) -> Callable:
        """Caller for the throttle."""
        ...
