"""
This type stub file was generated by pyright.
"""

from datetime import timedelta

from homeassistant.core import HomeAssistant, callback

from . import models

"""Storage for auth models."""
STORAGE_VERSION = ...
STORAGE_KEY = ...
GROUP_NAME_ADMIN = ...
GROUP_NAME_USER = ...
GROUP_NAME_READ_ONLY = ...

class AuthStore:
    """Stores authentication info.

    Any mutation to an object should happen inside the auth store.

    The auth store is lazy. It won't load the data from disk until a method is
    called that needs it.
    """

    def __init__(self, hass: HomeAssistant) -> None:
        """Initialize the auth store."""
        ...
    async def async_get_groups(self) -> list[models.Group]:
        """Retrieve all users."""
        ...
    async def async_get_group(self, group_id: str) -> models.Group | None:
        """Retrieve all users."""
        ...
    async def async_get_users(self) -> list[models.User]:
        """Retrieve all users."""
        ...
    async def async_get_user(self, user_id: str) -> models.User | None:
        """Retrieve a user by id."""
        ...
    async def async_create_user(
        self,
        name: str | None,
        is_owner: bool | None = ...,
        is_active: bool | None = ...,
        system_generated: bool | None = ...,
        credentials: models.Credentials | None = ...,
        group_ids: list[str] | None = ...,
    ) -> models.User:
        """Create a new user."""
        ...
    async def async_link_user(
        self, user: models.User, credentials: models.Credentials
    ) -> None:
        """Add credentials to an existing user."""
        ...
    async def async_remove_user(self, user: models.User) -> None:
        """Remove a user."""
        ...
    async def async_update_user(
        self,
        user: models.User,
        name: str | None = ...,
        is_active: bool | None = ...,
        group_ids: list[str] | None = ...,
    ) -> None:
        """Update a user."""
        ...
    async def async_activate_user(self, user: models.User) -> None:
        """Activate a user."""
        ...
    async def async_deactivate_user(self, user: models.User) -> None:
        """Activate a user."""
        ...
    async def async_remove_credentials(self, credentials: models.Credentials) -> None:
        """Remove credentials."""
        ...
    async def async_create_refresh_token(
        self,
        user: models.User,
        client_id: str | None = ...,
        client_name: str | None = ...,
        client_icon: str | None = ...,
        token_type: str = ...,
        access_token_expiration: timedelta = ...,
        credential: models.Credentials | None = ...,
    ) -> models.RefreshToken:
        """Create a new token for a user."""
        ...
    async def async_remove_refresh_token(
        self, refresh_token: models.RefreshToken
    ) -> None:
        """Remove a refresh token."""
        ...
    async def async_get_refresh_token(
        self, token_id: str
    ) -> models.RefreshToken | None:
        """Get refresh token by id."""
        ...
    async def async_get_refresh_token_by_token(
        self, token: str
    ) -> models.RefreshToken | None:
        """Get refresh token by token."""
        ...
    @callback
    def async_log_refresh_token_usage(
        self, refresh_token: models.RefreshToken, remote_ip: str | None = ...
    ) -> None:
        """Update refresh token last used information."""
        ...
